{
  "api/OmiyaGames.Axis3D.html": {
    "href": "api/OmiyaGames.Axis3D.html",
    "title": "Enum Axis3D | Common documentation",
    "keywords": "Enum Axis3D An enum representing an axis in 3D. Multiple axis can be combined in the Unity inspector using [EnumFlags] ( EnumFlagsAttribute ). Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Flags] public enum Axis3D Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.1.0 Date: 7/8/2021 Author: Taro Omiya Initial version. Fields Name Description X X-axis, typically right or left. Y Y-axis, typically up or down. Z Z-axis, typically forward or back."
  },
  "api/OmiyaGames.BidirectionalDictionary-2.html": {
    "href": "api/OmiyaGames.BidirectionalDictionary-2.html",
    "title": "Class BidirectionalDictionary<KEY, VALUE> | Common documentation",
    "keywords": "Class BidirectionalDictionary<KEY, VALUE> A two-direction dictionary where a key maps to a value, and vice versa. This does mean both keys and values must be unique. Inheritance Object BidirectionalDictionary<KEY, VALUE> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class BidirectionalDictionary<KEY, VALUE> : IDictionary<KEY, VALUE>, ICollection<KeyValuePair<KEY, VALUE>>, IEnumerable<KeyValuePair<KEY, VALUE>>, IEnumerable Type Parameters Name Description KEY VALUE Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.0-preview.1 Date: 4/4/2020 Author: Taro Omiya Initial version. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Version: 1.2.2 Date: 2/19/2022 Author: Taro Omiya Using for exception handling. Constructors BidirectionalDictionary() Default constructor that creates an empty dictionary. Declaration public BidirectionalDictionary() BidirectionalDictionary(BidirectionalDictionary<KEY, VALUE>) Clones a BidirectionalDictionary<KEY, VALUE> . Declaration public BidirectionalDictionary(BidirectionalDictionary<KEY, VALUE> dictionaryToClone) Parameters Type Name Description BidirectionalDictionary <KEY, VALUE> dictionaryToClone BidirectionalDictionary<KEY, VALUE> to clone. BidirectionalDictionary(Dictionary<KEY, VALUE>) Copies the content of another Dictionary<TKey,TValue> to this one. Declaration public BidirectionalDictionary(Dictionary<KEY, VALUE> dictionary) Parameters Type Name Description Dictionary <KEY, VALUE> dictionary Dictionary<TKey,TValue> to clone. BidirectionalDictionary(IDictionary<KEY, VALUE>, IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Copies the content of another IDictionary<TKey,TValue> to this one. Declaration public BidirectionalDictionary(IDictionary<KEY, VALUE> dictionary, IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description IDictionary <KEY, VALUE> dictionary IDictionary<TKey,TValue> to clone. IEqualityComparer <KEY> keyComparer Comparer for keys. IEqualityComparer <VALUE> valueComparer Comparer for values. BidirectionalDictionary(IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Constructor for setting the IEqualityComparer<T> to check equality of keys and values. Declaration public BidirectionalDictionary(IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description IEqualityComparer <KEY> keyComparer Comparer for keys. IEqualityComparer <VALUE> valueComparer Comparer for values. BidirectionalDictionary(Int32) Constructor for setting the initial capacity of the dictionary. Declaration public BidirectionalDictionary(int capacity) Parameters Type Name Description Int32 capacity Starting capacity of the dictionary. BidirectionalDictionary(Int32, IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Constructor for setting the initial capacity and IEqualityComparer<T> of keys and values. Declaration public BidirectionalDictionary(int capacity, IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description Int32 capacity Starting capacity of the dictionary. IEqualityComparer <KEY> keyComparer Comparer for keys. IEqualityComparer <VALUE> valueComparer Comparer for values. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Always false. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[KEY] Same as GetValue(KEY) and SetKey(VALUE, KEY) : gets and sets a corresponding value. Declaration public VALUE this[KEY key] { get; set; } Parameters Type Name Description KEY key Property Value Type Description VALUE KeyComparer The comparer used to check whether two keys equal each other. Declaration public IEqualityComparer<KEY> KeyComparer { get; } Property Value Type Description IEqualityComparer <KEY> Keys Declaration public ICollection<KEY> Keys { get; } Property Value Type Description ICollection <KEY> ValueComparer The comparer used to check whether two values equal each other. Declaration public IEqualityComparer<VALUE> ValueComparer { get; } Property Value Type Description IEqualityComparer <VALUE> Values Declaration public ICollection<VALUE> Values { get; } Property Value Type Description ICollection <VALUE> Methods Add(KEY, VALUE) Adds a new key and value combo, if and only if the key and the values are both unique. Declaration public void Add(KEY key, VALUE value) Parameters Type Name Description KEY key VALUE value Add(KeyValuePair<KEY, VALUE>) Declaration public void Add(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Clear() Declaration public void Clear() Contains(KeyValuePair<KEY, VALUE>) Checks if this dictionary contains the key-to-value pairing. Declaration public bool Contains(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Pairing to verify whether this dictionary contains or not. Returns Type Description Boolean True, if and only if this dictionary contains the same pairing as item . ContainsKey(KEY) Checks if the dictionary contains key . Declaration public bool ContainsKey(KEY key) Parameters Type Name Description KEY key KEY to search for. Returns Type Description Boolean True if dictionary contains key ContainsValue(VALUE) Checks if the dictionary contains value . Declaration public bool ContainsValue(VALUE value) Parameters Type Name Description VALUE value VALUE to search for. Returns Type Description Boolean True if dictionary contains value CopyTo(KeyValuePair<KEY, VALUE>[], Int32) Declaration public void CopyTo(KeyValuePair<KEY, VALUE>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair <KEY, VALUE>[] array Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<KeyValuePair<KEY, VALUE>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <KEY, VALUE>> GetKey(VALUE) Gets a corresponding key that's paired with a value. Declaration public KEY GetKey(VALUE value) Parameters Type Name Description VALUE value Returns Type Description KEY GetValue(KEY) Gets a corresponding value that's paired with a key. Declaration public VALUE GetValue(KEY key) Parameters Type Name Description KEY key Returns Type Description VALUE Remove(KEY) Same as RemoveKey(KEY) : removes a key and its corresponding value from the dictionary. Declaration public bool Remove(KEY key) Parameters Type Name Description KEY key Returns Type Description Boolean See Also RemoveKey(KEY) Remove(KeyValuePair<KEY, VALUE>) Removes a key-value pair if and only if there's a corresponding key-value map. Declaration public bool Remove(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Pairing to remove. Returns Type Description Boolean True if successfully removed; false, otherwise. See Also Contains(KeyValuePair<KEY, VALUE>) RemoveKey(KEY) If this dictionary contains the key, removes it and the value it's paired with. Declaration public bool RemoveKey(KEY key) Parameters Type Name Description KEY key The key to remove from the dictionary. Returns Type Description Boolean True if key was found and removed from the dictionary. RemoveValue(VALUE) If this dictionary contains the value, removes it and the key it's paired with. Declaration public bool RemoveValue(VALUE value) Parameters Type Name Description VALUE value The value to remove from the dictionary. Returns Type Description Boolean True if value was found and removed from the dictionary. SetKey(VALUE, KEY) Checks if a value exists, and if so, returns the corresponding key. Declaration public void SetKey(VALUE value, KEY newKey) Parameters Type Name Description VALUE value KEY newKey SetValue(KEY, VALUE) Checks if a key exists, and the newValue doesn't; if so, replaces the key's pairing to newValue. Declaration public void SetValue(KEY key, VALUE newValue) Parameters Type Name Description KEY key VALUE newValue Exceptions Type Condition KeyNotFoundException Thrown if the KEY isn't a valid key in the dictionary. TryGetKey(VALUE, out KEY) Checks if a value exists, and if so, returns the corresponding key. Declaration public bool TryGetKey(VALUE value, out KEY key) Parameters Type Name Description VALUE value KEY key Returns Type Description Boolean TryGetValue(KEY, out VALUE) Checks if a key exists, and if so, returns the corresponding value. Declaration public bool TryGetValue(KEY key, out VALUE value) Parameters Type Name Description KEY key VALUE value Returns Type Description Boolean"
  },
  "api/OmiyaGames.Common.Editor.AssetHelpers.html": {
    "href": "api/OmiyaGames.Common.Editor.AssetHelpers.html",
    "title": "Class AssetHelpers | Common documentation",
    "keywords": "Class AssetHelpers A series of utilities used throughout the OmiyaGames.Common.Editor namespace. This library focuses on assets-related static functions. Inheritance Object AssetHelpers Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public static class AssetHelpers Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/18/2015 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Fields ConfirmationDialogTitle Dialog title for overwriting files. Declaration public const string ConfirmationDialogTitle = \"Overwrite File?\" Field Value Type Description String CreateScriptableObjectAtFolder Default folder relative to Project root to create assets in. Declaration public const string CreateScriptableObjectAtFolder = \"Assets/\" Field Value Type Description String ManifestFileExtension File extension for manifest files. Declaration public const string ManifestFileExtension = \".manifest\" Field Value Type Description String Methods ConfirmOverwriteFile(String, String, Boolean) Checks if a file exists, and if so, optionally prompts the user if they want to overwrite it. Declaration public static bool ConfirmOverwriteFile(string pathOfAsset, string nameOfFile, bool showWindow = true) Parameters Type Name Description String pathOfAsset Absolute path of the asset to write to. String nameOfFile The name of the file, used to display the file that's going to be overwritten. Boolean showWindow If true, show a pop-up window prompting the user if they want to overwrite the file. Returns Type Description Boolean True if either file doesn't exist, or user confirms to overwrite it. CreateFolderRecursively(String) Starting with the child-most folder that does exist in newFolderPath , start creating folders until newFolderPath becomes an existing absolute path. . Declaration public static string CreateFolderRecursively(string newFolderPath) Parameters Type Name Description String newFolderPath Absolute path to a non-existant folder. Returns Type Description String returned by the final call of . GetLastFolderName(String, Boolean) From an absolute path, grab the child-most folder name. Declaration public static string GetLastFolderName(string path, bool pathIncludesFileName) Parameters Type Name Description String path The absolute path. Boolean pathIncludesFileName Flag indicating if path contains a file name or not. Returns Type Description String The child-most folder name. GetSelectedFolder() Retrieves the folder from the selected asset in the Project window. Declaration public static string GetSelectedFolder() Returns Type Description String Folder name of the selected asset. SaveAsAssetBundle(ScriptableObject, String, String, String, StringBuilder, Boolean, Boolean) Saves an asset bundle. Declaration public static string SaveAsAssetBundle(ScriptableObject newAsset, string newFolderName, string newFileName, string bundleId, StringBuilder builder, bool relativeToProject, bool overwritePreviousFile = false) Parameters Type Name Description ScriptableObject newAsset The single asset to bundle. String newFolderName Path to the folder to create the asset bundle to. If it doesn't exist yet, that folder will be created. String newFileName Name of the asset bundle file. String bundleId Sets . StringBuilder builder StringBuilder to create full path, etc. Boolean relativeToProject Flag indicating if newFolderName is relative to the root of the project, or absolute path. Boolean overwritePreviousFile If set to true, automatically overwrites the asset bundle that already exists. Returns Type Description String Path of the new asset."
  },
  "api/OmiyaGames.Common.Editor.DefaultNumberDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultNumberDrawer.html",
    "title": "Class DefaultNumberDrawer | Common documentation",
    "keywords": "Class DefaultNumberDrawer for DefaultNumberAttribute . Inheritance Object IDefaultDrawer DefaultNumberDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultNumberDrawer : IDefaultDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.DefaultObjectDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultObjectDrawer.html",
    "title": "Class DefaultObjectDrawer | Common documentation",
    "keywords": "Class DefaultObjectDrawer for DefaultObjectAttribute . Inheritance Object IDefaultDrawer DefaultObjectDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultObjectDrawer : IDefaultDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.DefaultRangeDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultRangeDrawer.html",
    "title": "Class DefaultRangeDrawer | Common documentation",
    "keywords": "Class DefaultRangeDrawer for DefaultRangeAttribute . Inheritance Object IDefaultDrawer DefaultRangeDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultRangeDrawer : IDefaultDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.EditorHelpers.html": {
    "href": "api/OmiyaGames.Common.Editor.EditorHelpers.html",
    "title": "Class EditorHelpers | Common documentation",
    "keywords": "Class EditorHelpers A series of utilities used throughout the OmiyaGames.Common.Editor namespace. This library focuses on editor-related static functions. Inheritance Object EditorHelpers Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorHelpers Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 9/20/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Fields IndentSpace Amount of space to indent for embedded controls. Declaration public const float IndentSpace = 14F Field Value Type Description Single MinHelpBoxHeight The minimum help box height on inspector. Declaration public const float MinHelpBoxHeight = 30F Field Value Type Description Single VerticalMargin The default vertical margin between controls. Declaration public const float VerticalMargin = 2F Field Value Type Description Single VerticalSpace Vertical gap between groups of controls to indicate separation. Declaration public const float VerticalSpace = 8F Field Value Type Description Single Methods CreateBool(UnityEditor.Editor, ref AnimBool) Sets up an . Declaration public static void CreateBool(UnityEditor.Editor editor, ref AnimBool boolAnimation) Parameters Type Name Description UnityEditor.Editor editor The editor to add the to. AnimBool boolAnimation The variable to set the new to. Note that if it's already set, that variable will be destroyed first before creating a new one. DestroyBool(UnityEditor.Editor, ref AnimBool) Destroys and cleans up . Declaration public static void DestroyBool(UnityEditor.Editor editor, ref AnimBool boolAnimation) Parameters Type Name Description UnityEditor.Editor editor Editor to remove 's events from. AnimBool boolAnimation The to clean-up. DrawBoldFoldout(AnimBool, String) Draws a foldout with bold text. Declaration public static void DrawBoldFoldout(AnimBool buildSettingsAnimation, string displayLabel) Parameters Type Name Description AnimBool buildSettingsAnimation for playing the slide-open animation. String displayLabel Text to display on foldout. DrawEnum<ENUM>(SerializedProperty, ENUM[]) Helper method to draw enums from a limited range. Declaration public static void DrawEnum<ENUM>(SerializedProperty property, params ENUM[] supportedEnums) where ENUM : Enum Parameters Type Name Description SerializedProperty property Property being drawn. ENUM[] supportedEnums List of supported enums. The first element is treated as default. Type Parameters Name Description ENUM Enum to draw in the editor. DrawEnum<ENUM>(SerializedProperty, ENUM[], ENUM) Helper method to draw enums from a limited range. Declaration public static void DrawEnum<ENUM>(SerializedProperty property, ENUM[] supportedEnums, ENUM defaultEnum) where ENUM : Enum Parameters Type Name Description SerializedProperty property Property being drawn. ENUM[] supportedEnums List of supported enums. The first element is treated as default. ENUM defaultEnum Type Parameters Name Description ENUM Enum to draw in the editor. DrawEnum<ENUM>(SerializedProperty, ENUM[], ENUM, ENUM, String) Helper method to draw enums from a limited range. Draws a warning if the target has an enum that doesn't match the property Declaration public static void DrawEnum<ENUM>(SerializedProperty property, ENUM[] supportedEnums, ENUM defaultEnum, ENUM targetsEnum, string message = \"\\\"{0}\\\" is not supported; \\\"{1}\\\" will be used instead.\") where ENUM : Enum Parameters Type Name Description SerializedProperty property Property being drawn. ENUM[] supportedEnums List of supported enums. The first element is treated as default. ENUM defaultEnum Default value to set the enum to. ENUM targetsEnum If an enum value is not supported, this enum is used instead. String message Type Parameters Name Description ENUM Enum to draw in the editor. GetHeight(GUIContent, Int32, Single) Gets total height for an editor. Declaration public static float GetHeight(GUIContent label, int numRows, float verticalMargin = 2F) Parameters Type Name Description GUIContent label Label for the control: if it's displayed, increments number of rows. Int32 numRows Number of rows, e.g. number of controls. Single verticalMargin The height of each margin between rows. Returns Type Description Single Total height for editor. GetHeight(Int32, Single) Gets total height for an editor. Declaration public static float GetHeight(int numRows, float verticalMargin = 2F) Parameters Type Name Description Int32 numRows Number of rows, e.g. number of controls. Single verticalMargin The height of each margin between rows. Returns Type Description Single Total height for editor. GetHelpBoxHeight(String, Single, Single) Get the height of the help box, based on the text and width of controls. Declaration public static float GetHelpBoxHeight(string text, float viewWidth, float minHeight = 30F) Parameters Type Name Description String text The text to display in the help box. Single viewWidth Width of the view. Single minHeight The minimum height of help box, if text is short. Returns Type Description Single The height of the help box to display. SingleLineHeight(Single) Single line height, plus the number of vertical margins (usually between 0 to 2). Declaration public static float SingleLineHeight(float verticalMargin) Parameters Type Name Description Single verticalMargin Number of margins. 1 for top-only, 2 for top and bottom. Returns Type Description Single Vertical height for single line, plus margins."
  },
  "api/OmiyaGames.Common.Editor.EnumFlagsDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.EnumFlagsDrawer.html",
    "title": "Class EnumFlagsDrawer | Common documentation",
    "keywords": "Class EnumFlagsDrawer Makes an enum multi-selectable in the Unity editor with [EnumFlags]. Inheritance Object EnumFlagsDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class EnumFlagsDrawer : PropertyDrawer Remarks Code by Aqibsadiq from Unity Forums: https://forum.unity.com/threads/multiple-enum-select-from-inspector.184729/ Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods DisplayEnumFlags(Rect, SerializedProperty, GUIContent) Draws a multi-selectable enum field in the inspector. DisplayEnumFlags(Rect, SerializedProperty, GUIContent, String[]) Declaration public static int DisplayEnumFlags(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position The area to draw. SerializedProperty property The property to draw. GUIContent label Label of the field, if any. Returns Type Description Int32 Selected bit-flags. DisplayEnumFlags(Rect, SerializedProperty, GUIContent, String[]) Draws a multi-selectable enum field in the inspector. Declaration public static int DisplayEnumFlags(Rect position, SerializedProperty property, GUIContent label, string[] enumNames) Parameters Type Name Description Rect position The area to draw. SerializedProperty property The property to draw. GUIContent label Label of the field, if any. String [] enumNames List of display names for each enum flag. Returns Type Description Int32 Selected bit-flags. OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.FilePathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.FilePathDrawer.html",
    "title": "Class FilePathDrawer | Common documentation",
    "keywords": "Class FilePathDrawer for FilePathAttribute . FolderPathDrawer Inheritance Object FolderPathDrawer FilePathDrawer Inherited Members FolderPathDrawer.GetLocalPath(String, FolderPathAttribute.RelativeTo) FolderPathDrawer.GetPropertyHeight(SerializedProperty, GUIContent) FolderPathDrawer.OnGUI(Rect, SerializedProperty, GUIContent) FolderPathDrawer.WrongPathMessage Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class FilePathDrawer : FolderPathDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 11/01/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Properties IsValid Declaration protected override bool IsValid { get; } Property Value Type Description Boolean Overrides FolderPathDrawer.IsValid WrongAttributeMessage Message for using the attribute on the wrong variable type. Declaration public override string WrongAttributeMessage { get; } Property Value Type Description String Overrides FolderPathDrawer.WrongAttributeMessage Methods IsMessageBoxShown(SerializedProperty, FolderPathAttribute) Indicates if an error message box is shown. Declaration public override bool IsMessageBoxShown(SerializedProperty property, FolderPathAttribute attribute) Parameters Type Name Description SerializedProperty property Property to check. FolderPathAttribute attribute Attribute to check if IsWarningDisplayed is set. Returns Type Description Boolean Overrides FolderPathDrawer.IsMessageBoxShown(SerializedProperty, FolderPathAttribute) OpenDialog(SerializedProperty, GUIContent) Declaration protected override void OpenDialog(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Overrides FolderPathDrawer.OpenDialog(SerializedProperty, GUIContent)"
  },
  "api/OmiyaGames.Common.Editor.FolderPathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.FolderPathDrawer.html",
    "title": "Class FolderPathDrawer | Common documentation",
    "keywords": "Class FolderPathDrawer for FolderPathAttribute Inheritance Object FolderPathDrawer FilePathDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPathDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 11/01/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Properties IsValid Declaration protected virtual bool IsValid { get; } Property Value Type Description Boolean WrongAttributeMessage Message for using the attribute on the wrong variable type. Declaration public virtual string WrongAttributeMessage { get; } Property Value Type Description String WrongPathMessage Message for entering the wrong path. Declaration public string WrongPathMessage { get; } Property Value Type Description String Methods GetLocalPath(String, FolderPathAttribute.RelativeTo) Converts a full path into a relative path. Declaration public static string GetLocalPath(string fullPath, FolderPathAttribute.RelativeTo relativeTo) Parameters Type Name Description String fullPath Absolute path. FolderPathAttribute.RelativeTo relativeTo Enum indicating what the returned path should be local to. Returns Type Description String If fullPath contains folder path relativeTo returns a path with that portion removed. GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single IsMessageBoxShown(SerializedProperty, FolderPathAttribute) Indicates if an error message box is shown. Declaration public virtual bool IsMessageBoxShown(SerializedProperty property, FolderPathAttribute attribute) Parameters Type Name Description SerializedProperty property Property to check. FolderPathAttribute attribute Attribute to check if IsWarningDisplayed is set. Returns Type Description Boolean OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label OpenDialog(SerializedProperty, GUIContent) Declaration protected virtual void OpenDialog(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.HsvColorDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.HsvColorDrawer.html",
    "title": "Class HsvColorDrawer | Common documentation",
    "keywords": "Class HsvColorDrawer Property Drawer for HsvColor by...just making it into a color picker. Inheritance Object HsvColorDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class HsvColorDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/12/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Version: 1.1.0 Date: 6/28/2021 Author: Taro Omiya Small refactor. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.html": {
    "href": "api/OmiyaGames.Common.Editor.html",
    "title": "Namespace OmiyaGames.Common.Editor | Common documentation",
    "keywords": "Namespace OmiyaGames.Common.Editor Classes AssetHelpers A series of utilities used throughout the OmiyaGames.Common.Editor namespace. This library focuses on assets-related static functions. DefaultNumberDrawer for DefaultNumberAttribute . DefaultObjectDrawer for DefaultObjectAttribute . DefaultRangeDrawer for DefaultRangeAttribute . EditorHelpers A series of utilities used throughout the OmiyaGames.Common.Editor namespace. This library focuses on editor-related static functions. EnumFlagsDrawer Makes an enum multi-selectable in the Unity editor with [EnumFlags]. FilePathDrawer for FilePathAttribute . FolderPathDrawer FolderPathDrawer for FolderPathAttribute HsvColorDrawer Property Drawer for HsvColor by...just making it into a color picker. IDefaultDrawer Helper class that unifies common methods in a few drawers. DefaultRangeDrawer DefaultObjectDrawer DefaultNumberDrawer ProjectSettingsHeader The header label to the project settings dialog. ProjectSettingsHeader.UxmlFactory for ProjectSettingsHeader . ProjectSettingsHeader.UxmlTraits ProjectSettingsHeader.UxmlTraits for ProjectSettingsHeader . RandomListDrawer for RandomList<T> . RandomListElementDrawer for RandomList<T>.ElementFrequency . ReadOnlyDrawer for ReadOnlyAttribute . ScenePathDrawer for ScenePathAttribute . SerializableHashSetDrawer for SerializableHashSet<T> . SerializableListSetDrawer for SerializableListSet<T> . SingleChildDrawer Helper for drawing any classes that has only a single child property in the inspector. It will use Unity's default method of drawing said variable. Spacer An empty with a set height that can be overwritten by another USS. Spacer.UxmlFactory for Spacer . SupportedPlatformsDrawer Property drawer for SupportedPlatforms . TrackableDrawer Property Drawer for Trackable<T> that draws the value directly. Delegates IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> IDefaultDrawer.SetToDefault<ATTRIBUTE>"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.DisplayControl-2.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.DisplayControl-2.html",
    "title": "Delegate IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> | Common documentation",
    "keywords": "Delegate IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax protected delegate void DisplayControl<ATTRIBUTE, VALUE>(SerializedProperty property, ATTRIBUTE range, Rect position, ref VALUE value) where ATTRIBUTE : PropertyAttribute; Parameters Type Name Description SerializedProperty property ATTRIBUTE range Rect position VALUE value Type Parameters Name Description ATTRIBUTE VALUE"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.html",
    "title": "Class IDefaultDrawer | Common documentation",
    "keywords": "Class IDefaultDrawer Helper class that unifies common methods in a few drawers. DefaultRangeDrawer DefaultObjectDrawer DefaultNumberDrawer Inheritance Object IDefaultDrawer DefaultNumberDrawer DefaultObjectDrawer DefaultRangeDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public abstract class IDefaultDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, ref Boolean, ref VALUE) Displays a checkbox and control for the value. Declaration protected static void DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty property, ATTRIBUTE range, Rect position, IDefaultDrawer.SetToDefault<ATTRIBUTE> setToDefault, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> slider, ref bool show, ref VALUE value) where ATTRIBUTE : PropertyAttribute Parameters Type Name Description SerializedProperty property ATTRIBUTE range Rect position IDefaultDrawer.SetToDefault <ATTRIBUTE> setToDefault IDefaultDrawer.DisplayControl <ATTRIBUTE, VALUE> slider Boolean show VALUE value Type Parameters Name Description ATTRIBUTE VALUE Remarks Taken from https://bitbucket.org/Unity-Technologies/ui/src/2017.3/UnityEditor.UI/UI/LayoutElementEditor.cs SetupPositioning(SerializedProperty, Rect, out Rect, out Rect) Sets up positioning. Declaration protected static void SetupPositioning(SerializedProperty property, Rect position, out Rect toggleRect, out Rect fieldRect) Parameters Type Name Description SerializedProperty property Rect position Rect toggleRect Rect fieldRect Remarks Taken from https://bitbucket.org/Unity-Technologies/ui/src/2017.3/UnityEditor.UI/UI/LayoutElementEditor.cs"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.SetToDefault-1.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.SetToDefault-1.html",
    "title": "Delegate IDefaultDrawer.SetToDefault<ATTRIBUTE> | Common documentation",
    "keywords": "Delegate IDefaultDrawer.SetToDefault<ATTRIBUTE> Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax protected delegate void SetToDefault<ATTRIBUTE>(SerializedProperty property, ATTRIBUTE range) where ATTRIBUTE : PropertyAttribute; Parameters Type Name Description SerializedProperty property ATTRIBUTE range Type Parameters Name Description ATTRIBUTE"
  },
  "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.html": {
    "href": "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.html",
    "title": "Class ProjectSettingsHeader | Common documentation",
    "keywords": "Class ProjectSettingsHeader The header label to the project settings dialog. Inheritance Object ProjectSettingsHeader Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class ProjectSettingsHeader : TextElement Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 9/27/2020 Author: Taro Omiya Initial verison. Constructors ProjectSettingsHeader() Constructs an empty with the height of . Declaration public ProjectSettingsHeader() Properties canGrabFocus Declaration public override bool canGrabFocus { get; } Property Value Type Description Boolean HelpButton Corresponding control for the help button. Declaration public Button HelpButton { get; } Property Value Type Description Button HelpUrl The URL that the help button opens. Declaration public string HelpUrl { get; set; } Property Value Type Description String"
  },
  "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.UxmlFactory.html": {
    "href": "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.UxmlFactory.html",
    "title": "Class ProjectSettingsHeader.UxmlFactory | Common documentation",
    "keywords": "Class ProjectSettingsHeader.UxmlFactory for ProjectSettingsHeader . Inheritance Object ProjectSettingsHeader.UxmlFactory Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : ProjectSettingsHeader.UxmlFactory<ProjectSettingsHeader, ProjectSettingsHeader.UxmlTraits>"
  },
  "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.UxmlTraits.html": {
    "href": "api/OmiyaGames.Common.Editor.ProjectSettingsHeader.UxmlTraits.html",
    "title": "Class ProjectSettingsHeader.UxmlTraits | Common documentation",
    "keywords": "Class ProjectSettingsHeader.UxmlTraits ProjectSettingsHeader.UxmlTraits for ProjectSettingsHeader . Inheritance Object ProjectSettingsHeader.UxmlTraits Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class UxmlTraits : TextElement.UxmlTraits Fields helpUrlAttr Attribute corresponding to help-url . Declaration protected UxmlStringAttributeDescription helpUrlAttr Field Value Type Description UxmlStringAttributeDescription Methods Init(VisualElement, IUxmlAttributes, CreationContext) Declaration public override void Init(VisualElement ve, IUxmlAttributes bag, CreationContext cc) Parameters Type Name Description VisualElement ve IUxmlAttributes bag CreationContext cc"
  },
  "api/OmiyaGames.Common.Editor.RandomListDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.RandomListDrawer.html",
    "title": "Class RandomListDrawer | Common documentation",
    "keywords": "Class RandomListDrawer for RandomList<T> . Inheritance Object SingleChildDrawer RandomListDrawer Inherited Members SingleChildDrawer.OnGUI(Rect, SerializedProperty, GUIContent) SingleChildDrawer.GetPropertyHeight(SerializedProperty, GUIContent) SingleChildDrawer.ChildProperty(SerializedProperty) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class RandomListDrawer : SingleChildDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Properties SerializedVariableName Name of the single serialized variable. Declaration public override string SerializedVariableName { get; } Property Value Type Description String Overrides SingleChildDrawer.SerializedVariableName"
  },
  "api/OmiyaGames.Common.Editor.RandomListElementDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.RandomListElementDrawer.html",
    "title": "Class RandomListElementDrawer | Common documentation",
    "keywords": "Class RandomListElementDrawer for RandomList<T>.ElementFrequency . Inheritance Object RandomListElementDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class RandomListElementDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect fullPosition, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect fullPosition SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.ReadOnlyDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | Common documentation",
    "keywords": "Class ReadOnlyDrawer for ReadOnlyAttribute . Inheritance Object ReadOnlyDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class ReadOnlyDrawer : PropertyDrawer Remarks Code by It3ration from Unity Answers: http://answers.unity3d.com/questions/489942/how-to-make-a-readonly-property-in-inspector.html Revision Description Date: 10/1/2014 Author: It3ration Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.ScenePathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.ScenePathDrawer.html",
    "title": "Class ScenePathDrawer | Common documentation",
    "keywords": "Class ScenePathDrawer for ScenePathAttribute . Inheritance Object ScenePathDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class ScenePathDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 11/01/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods DrawSceneAssetField(Rect, SerializedProperty, GUIContent) Draws the asset field on the inspector. Declaration public static void DrawSceneAssetField(Rect position, SerializedProperty property, GUIContent label = null) Parameters Type Name Description Rect position The rect area to draw. SerializedProperty property The String property to represent. GUIContent label Label to display this property. OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.SerializableHashSetDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.SerializableHashSetDrawer.html",
    "title": "Class SerializableHashSetDrawer | Common documentation",
    "keywords": "Class SerializableHashSetDrawer for SerializableHashSet<T> . Inheritance Object SingleChildDrawer SerializableHashSetDrawer Inherited Members SingleChildDrawer.OnGUI(Rect, SerializedProperty, GUIContent) SingleChildDrawer.GetPropertyHeight(SerializedProperty, GUIContent) SingleChildDrawer.ChildProperty(SerializedProperty) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class SerializableHashSetDrawer : SingleChildDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Properties SerializedVariableName Name of the single serialized variable. Declaration public override string SerializedVariableName { get; } Property Value Type Description String Overrides SingleChildDrawer.SerializedVariableName"
  },
  "api/OmiyaGames.Common.Editor.SerializableListSetDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.SerializableListSetDrawer.html",
    "title": "Class SerializableListSetDrawer | Common documentation",
    "keywords": "Class SerializableListSetDrawer for SerializableListSet<T> . Inheritance Object SingleChildDrawer SerializableListSetDrawer Inherited Members SingleChildDrawer.OnGUI(Rect, SerializedProperty, GUIContent) SingleChildDrawer.GetPropertyHeight(SerializedProperty, GUIContent) SingleChildDrawer.ChildProperty(SerializedProperty) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class SerializableListSetDrawer : SingleChildDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Properties SerializedVariableName Name of the single serialized variable. Declaration public override string SerializedVariableName { get; } Property Value Type Description String Overrides SingleChildDrawer.SerializedVariableName"
  },
  "api/OmiyaGames.Common.Editor.SingleChildDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.SingleChildDrawer.html",
    "title": "Class SingleChildDrawer | Common documentation",
    "keywords": "Class SingleChildDrawer Helper for drawing any classes that has only a single child property in the inspector. It will use Unity's default method of drawing said variable. Inheritance Object SingleChildDrawer RandomListDrawer SerializableHashSetDrawer SerializableListSetDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public abstract class SingleChildDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Properties SerializedVariableName Name of the single serialized variable. Declaration public abstract string SerializedVariableName { get; } Property Value Type Description String Methods ChildProperty(SerializedProperty) Gets the single serialized variable's property from the parent property. Declaration protected SerializedProperty ChildProperty(SerializedProperty property) Parameters Type Name Description SerializedProperty property Parent property (source of this editor.) Returns Type Description SerializedProperty Child property. GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.Spacer.html": {
    "href": "api/OmiyaGames.Common.Editor.Spacer.html",
    "title": "Class Spacer | Common documentation",
    "keywords": "Class Spacer An empty with a set height that can be overwritten by another USS. Inheritance Object Spacer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class Spacer : VisualElement Remarks The MIT License (MIT) Copyright (c) 2020-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.2.0-preview.1 Date: 8/10/2020 Author: Taro Omiya Initial verison. Constructors Spacer() Constructs an empty with the height of DefaultHeight . Declaration public Spacer() Fields DefaultHeight The default height, if not overridden by another USS. Declaration public const float DefaultHeight = 8F Field Value Type Description Single Properties canGrabFocus Declaration public override bool canGrabFocus { get; } Property Value Type Description Boolean"
  },
  "api/OmiyaGames.Common.Editor.Spacer.UxmlFactory.html": {
    "href": "api/OmiyaGames.Common.Editor.Spacer.UxmlFactory.html",
    "title": "Class Spacer.UxmlFactory | Common documentation",
    "keywords": "Class Spacer.UxmlFactory for Spacer . Inheritance Object Spacer.UxmlFactory Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class UxmlFactory : Spacer.UxmlFactory<Spacer, UxmlTraits>"
  },
  "api/OmiyaGames.Common.Editor.SupportedPlatformsDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.SupportedPlatformsDrawer.html",
    "title": "Class SupportedPlatformsDrawer | Common documentation",
    "keywords": "Class SupportedPlatformsDrawer Property drawer for SupportedPlatforms . Inheritance Object SupportedPlatformsDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class SupportedPlatformsDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/12/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.TrackableDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.TrackableDrawer.html",
    "title": "Class TrackableDrawer | Common documentation",
    "keywords": "Class TrackableDrawer Property Drawer for Trackable<T> that draws the value directly. Inheritance Object TrackableDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class TrackableDrawer : PropertyDrawer Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.1.0 Date: 6/28/2021 Author: Taro Omiya Converted the class to a package. Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.DefaultNumberAttribute.html": {
    "href": "api/OmiyaGames.DefaultNumberAttribute.html",
    "title": "Class DefaultNumberAttribute | Common documentation",
    "keywords": "Class DefaultNumberAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. Inheritance Object DefaultNumberAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultNumberAttribute : PropertyAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors DefaultNumberAttribute(Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the Declaration public DefaultNumberAttribute(float defaultNumber) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. DefaultNumberAttribute(Single, Boolean, Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the Declaration public DefaultNumberAttribute(float defaultNumber, bool greaterThan, float startNumber) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. Boolean greaterThan Indicates whether the editor number is limited to being greater or less. Single startNumber If greaterThan is true, the number in the editor must be greater than this parameter. If false, then the number in the editor must be less. Properties DefaultNumber The number set to the value if editor's checkbox is unchecked. Declaration public float DefaultNumber { get; } Property Value Type Description Single NumberRange Indicates whether the editor number is limited to being greater, less, or neither. Declaration public DefaultNumberAttribute.Range NumberRange { get; } Property Value Type Description DefaultNumberAttribute.Range StartNumber If numberRange is Range.GreaterThanOrEqualTo , the number in the editor must be greater than this parameter. If Range.LessThanOrEqualTo , then the number in the editor must be less. Otherwise, this value is the first value the editor is set to when it's checked. Declaration public float StartNumber { get; } Property Value Type Description Single"
  },
  "api/OmiyaGames.DefaultNumberAttribute.Range.html": {
    "href": "api/OmiyaGames.DefaultNumberAttribute.Range.html",
    "title": "Enum DefaultNumberAttribute.Range | Common documentation",
    "keywords": "Enum DefaultNumberAttribute.Range Indicates whether the editor number is limited to being greater, less, or neither. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public enum Range Fields Name Description FullRange Allow inspector to enter any number. GreaterThanOrEqualTo Prevents the inspector from entering a number below a certain value. LessThanOrEqualTo Prevents the inspector from entering a number above a certain value."
  },
  "api/OmiyaGames.DefaultObjectAttribute.html": {
    "href": "api/OmiyaGames.DefaultObjectAttribute.html",
    "title": "Class DefaultObjectAttribute | Common documentation",
    "keywords": "Class DefaultObjectAttribute Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. Inheritance Object DefaultObjectAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultObjectAttribute : PropertyAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors DefaultObjectAttribute() Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. Declaration public DefaultObjectAttribute()"
  },
  "api/OmiyaGames.DefaultRangeAttribute.html": {
    "href": "api/OmiyaGames.DefaultRangeAttribute.html",
    "title": "Class DefaultRangeAttribute | Common documentation",
    "keywords": "Class DefaultRangeAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a slider, allowing the user to change this value. Inheritance Object DefaultRangeAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultRangeAttribute : PropertyAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors DefaultRangeAttribute(Int32, Int32, Int32) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the value to a specified range between min and max (both inclusive). Declaration public DefaultRangeAttribute(int defaultNumber, int min, int max) Parameters Type Name Description Int32 defaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Int32 min Minimum value in the editor's slider. Int32 max Maximum value in the editor's slider. DefaultRangeAttribute(Single, Single, Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the value to a specified range between min and max (both inclusive). Declaration public DefaultRangeAttribute(float defaultNumber, float min, float max) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Single min Minimum value in the editor's slider. Single max Maximum value in the editor's slider. Properties DefaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Declaration public float DefaultNumber { get; } Property Value Type Description Single Max Maximum value in the editor's slider. Declaration public float Max { get; } Property Value Type Description Single Min Minimum value in the editor's slider. Declaration public float Min { get; } Property Value Type Description Single"
  },
  "api/OmiyaGames.EnumFlagsAttribute.html": {
    "href": "api/OmiyaGames.EnumFlagsAttribute.html",
    "title": "Class EnumFlagsAttribute | Common documentation",
    "keywords": "Class EnumFlagsAttribute Makes an enum multi-selectable in the Unity editor with [EnumFlags]. Inheritance Object EnumFlagsAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class EnumFlagsAttribute : PropertyAttribute Remarks Code by Aqibsadiq from Unity Forums: https://forum.unity.com/threads/multiple-enum-select-from-inspector.184729/ Revision Description Date: 11/20/2017 Author: Aqibsadiq Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX."
  },
  "api/OmiyaGames.FilePathAttribute.html": {
    "href": "api/OmiyaGames.FilePathAttribute.html",
    "title": "Class FilePathAttribute | Common documentation",
    "keywords": "Class FilePathAttribute Adds a browse button to the inspector to select a path. Simply add [FilePath] to a string. Inheritance Object FolderPathAttribute FilePathAttribute Inherited Members FolderPathAttribute.DefaultLocalPath FolderPathAttribute.PathRelativeTo FolderPathAttribute.DefaultPath FolderPathAttribute.IsWarningDisplayed Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class FilePathAttribute : FolderPathAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 11/01/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors FilePathAttribute(String, String, FolderPathAttribute.RelativeTo, Boolean) Adds a browse button to a string field. Declaration public FilePathAttribute(string fileExtensions, string defaultPath = \"Assets\", FolderPathAttribute.RelativeTo relativeTo = FolderPathAttribute.RelativeTo.None, bool displayWarning = true) Parameters Type Name Description String fileExtensions The file extention, without \"*.\" Used to filter files in the file dialog. String defaultPath The default folder to open the file dialog. FolderPathAttribute.RelativeTo relativeTo Boolean displayWarning Properties FileExtension Expected file extension. This will be used to filter files in the browse file window. Declaration public string FileExtension { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.FolderPathAttribute.html": {
    "href": "api/OmiyaGames.FolderPathAttribute.html",
    "title": "Class FolderPathAttribute | Common documentation",
    "keywords": "Class FolderPathAttribute Adds a browse button to the inspector to select a path. Simply add [FolderPath] to a string. Inheritance Object FolderPathAttribute FilePathAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class FolderPathAttribute : PropertyAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/26/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors FolderPathAttribute(String, FolderPathAttribute.RelativeTo, Boolean) Constructor for setting up the folder path inspector. Declaration public FolderPathAttribute(string defaultPath = \"Assets\", FolderPathAttribute.RelativeTo relativeTo = FolderPathAttribute.RelativeTo.None, bool displayWarning = true) Parameters Type Name Description String defaultPath The default path to open the dialog in. FolderPathAttribute.RelativeTo relativeTo The folder to make the path relative to. Boolean displayWarning Flag on whether to display a warning on an invalid path in the inspector. Fields DefaultLocalPath Default local path. Declaration public const string DefaultLocalPath = \"Assets\" Field Value Type Description String Properties DefaultPath The default path to open the dialog in. Declaration public string DefaultPath { get; } Property Value Type Description String IsWarningDisplayed If true, displays a warning if the folder path is not valid. Declaration public bool IsWarningDisplayed { get; } Property Value Type Description Boolean PathRelativeTo What folder the path string is relative to. Declaration public FolderPathAttribute.RelativeTo PathRelativeTo { get; } Property Value Type Description FolderPathAttribute.RelativeTo"
  },
  "api/OmiyaGames.FolderPathAttribute.RelativeTo.html": {
    "href": "api/OmiyaGames.FolderPathAttribute.RelativeTo.html",
    "title": "Enum FolderPathAttribute.RelativeTo | Common documentation",
    "keywords": "Enum FolderPathAttribute.RelativeTo The directory FolderPathAttribute should be set local to. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public enum RelativeTo Fields Name Description None Path will be set to absolute path. ProjectDirectory Path will be set to local, if detected."
  },
  "api/OmiyaGames.Helpers.ChangeEvent-2.html": {
    "href": "api/OmiyaGames.Helpers.ChangeEvent-2.html",
    "title": "Delegate Helpers.ChangeEvent<SOURCE, VALUE> | Common documentation",
    "keywords": "Delegate Helpers.ChangeEvent<SOURCE, VALUE> Delegate for tracking changes to a single value. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public delegate void ChangeEvent<SOURCE, VALUE>(SOURCE eventSource, VALUE oldValue, VALUE newValue); Parameters Type Name Description SOURCE eventSource The object's member variable being changed. VALUE oldValue The old member variable's value. VALUE newValue The new value the member variable is going to be set to. Type Parameters Name Description SOURCE Type of the object being changed. VALUE Type of the object's member variable being changed."
  },
  "api/OmiyaGames.Helpers.html": {
    "href": "api/OmiyaGames.Helpers.html",
    "title": "Class Helpers | Common documentation",
    "keywords": "Class Helpers A series of utilities used throughout the OmiyaGames namespace. Inheritance Object Helpers Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public static class Helpers Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/18/2015 Author: Taro Omiya Initial verison. Date: 6/4/2018 Author: Taro Omiya Added method for shortening URL. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converting the file to a package. Version: 0.1.4-preview.1 Date: 5/25/2020 Author: Taro Omiya Updating documentation. Moving method to Omiya Games - Web package. Version: 1.1.0 Date: 6/28/2021 Author: Taro Omiya Adding a delegate to monitor changing values. Fields FileExtensionScriptableObject File extension for files. Declaration public const string FileExtensionScriptableObject = \".asset\" Field Value Type Description String FileExtensionText File extension for text files. Declaration public const string FileExtensionText = \".txt\" Field Value Type Description String InvalidFileNameCharactersSet Declaration public static readonly ISet<char> InvalidFileNameCharactersSet Field Value Type Description ISet < Char > IsTimeStampPrintedByDefault Flag whether Log(String, Boolean) prints the timestamp. Declaration public const bool IsTimeStampPrintedByDefault = true Field Value Type Description Boolean PathDivider Path divider Unity normalizes to. Declaration public const char PathDivider = '/' Field Value Type Description Char SnapToThreshold Distance between 2 UI elements before the animated one snaps to position. Declaration public const float SnapToThreshold = 0.01F Field Value Type Description Single TimeStampPrint Timestamp format printed in Log(String, Boolean) . Declaration public const string TimeStampPrint = \"HH:mm:ss.ffff GMTzz\" Field Value Type Description String Methods ConvertToEnum<ENUM>(Int32) Converts Int32 to an ENUM . More useful for . Declaration public static ENUM ConvertToEnum<ENUM>(int value) where ENUM : Enum Parameters Type Name Description Int32 value Int32 to convert. Returns Type Description ENUM value converted to an ENUM . Type Parameters Name Description ENUM Enum to convert to. ConvertToInt<ENUM>(ENUM) Converts an ENUM to Int32 . More useful for . Declaration public static int ConvertToInt<ENUM>(ENUM value) where ENUM : Enum Parameters Type Name Description ENUM value ENUM to convert to. Returns Type Description Int32 value converted into an Int32 Type Parameters Name Description ENUM Enum to convert from. DecrementVector(ref Vector2, ref Vector2) A slightly more efficient way of decrementing a Vector3 than assignment. Declaration public static void DecrementVector(ref Vector2 toSet, ref Vector2 subtract) Parameters Type Name Description Vector2 toSet Vector2 subtract DecrementVector(ref Vector3, ref Vector3) A slightly more efficient way of decrementing a Vector3 than assignment. Declaration public static void DecrementVector(ref Vector3 toSet, ref Vector3 subtract) Parameters Type Name Description Vector3 toSet Vector3 subtract Destroy(Object) Destroys an safely. Declaration public static void Destroy(Object obj) Parameters Type Name Description Object obj Object to be destroyed. Remarks Code from Unity's Core RenderPipeline package ( CoreUtils.Destroy(obj) .) GetComponentCached<T>(MonoBehaviour, ref T) Grabs a component, and sets it to cache, unless the cache isn't null. Declaration public static T GetComponentCached<T>(MonoBehaviour script, ref T cache) where T : Component Parameters Type Name Description MonoBehaviour script T cache Returns Type Description T Type Parameters Name Description T GetParentCanvas(Transform) Loops up the transform's parents, seeking for an instance of . Declaration public static Canvas GetParentCanvas(Transform checkTransform) Parameters Type Name Description Transform checkTransform to search for a . Returns Type Description Canvas on checkTransform , its parent transforms, or null if none was found. IncrementVector(ref Vector2, ref Vector2) A slightly more efficient way of incrementing a Vector3 than assignment. Declaration public static void IncrementVector(ref Vector2 toSet, ref Vector2 add) Parameters Type Name Description Vector2 toSet Vector2 add IncrementVector(ref Vector3, ref Vector3) A slightly more efficient way of incrementing a Vector3 than assignment. Declaration public static void IncrementVector(ref Vector3 toSet, ref Vector3 add) Parameters Type Name Description Vector3 toSet Vector3 add Log(String, Boolean) Logs to the console only if DEBUG macro is turned on. Declaration public static void Log(string message, bool showTimestamp = true) Parameters Type Name Description String message Message to print. Boolean showTimestamp Timestampe format. RemoveDiacritics(String, StringBuilder) Removes any invalid characters for building a file name. Declaration public static string RemoveDiacritics(string text, StringBuilder stringBuilder = null) Parameters Type Name Description String text Text to remove diacritics from. StringBuilder stringBuilder An optional StringBuilder this method will use to generate the returned string. Good for performance. Returns Type Description String text with invalid file characters removed. Remarks Taken from http://archives.miloush.net/michkap/archive/2007/05/14/2629747.html RemoveDuplicateEntries<H>(IList<H>, IEqualityComparer<H>) Remove duplicate entries from a list . Declaration public static void RemoveDuplicateEntries<H>(IList<H> list, IEqualityComparer<H> comparer = null) Parameters Type Name Description IList <H> list List to remove duplicates from. IEqualityComparer <H> comparer Comparer to verify whether two elements are the same or not. Type Parameters Name Description H The type of List. Replicate(GameObject, Boolean) Creates a clone of the provided GameObject and places it under the same parent on the hierarchy. Declaration public static GameObject Replicate(GameObject copyFrom, bool setActive = true) Parameters Type Name Description GameObject copyFrom The GameObject to clone off of. Boolean setActive Whether the clone is active or not Returns Type Description GameObject A clone of GameObject Replicate(GameObject, Transform, Boolean, Boolean, Boolean, Boolean) Creates a clone of the provided GameObject and places it under the assigned transform on the hierarchy. Declaration public static GameObject Replicate(GameObject copyFrom, Transform attachTo, bool setActive = true, bool copyLocalPosition = true, bool copyLocalRotation = true, bool copyLocalScale = true) Parameters Type Name Description GameObject copyFrom The GameObject to clone off of. Transform attachTo The Transform to make the clone a child of. null will place the clone at the hierarchy's root. Boolean setActive Whether the clone is active or not Boolean copyLocalPosition Whether the clone will be at the same position as the original or not Boolean copyLocalRotation Whether the clone will have the same rotation as the original or not Boolean copyLocalScale Whether the clone will be scaled the same as the original or not Returns Type Description GameObject A clone of GameObject Replicate<T>(T, Boolean) Creates a clone of the components GameObject , places it under the same parent on the hierarchy, and finally returns the copy of a component attached to that clone. Declaration public static T Replicate<T>(T copyFrom, bool setActive = true) where T : Component Parameters Type Name Description T copyFrom The component to grab its GameObject . This will be used to clone a new GameObject . Boolean setActive Whether the clone is active or not Returns Type Description T A component attached to the new clone Type Parameters Name Description T Component attached to a GameObject Replicate<T>(T, Transform, Boolean, Boolean, Boolean, Boolean) Declaration public static T Replicate<T>(T copyFrom, Transform attachTo, bool setActive = true, bool copyLocalPosition = true, bool copyLocalRotation = true, bool copyLocalScale = true) where T : Component Parameters Type Name Description T copyFrom Transform attachTo Boolean setActive Boolean copyLocalPosition Boolean copyLocalRotation Boolean copyLocalScale Returns Type Description T Type Parameters Name Description T SetVector(ref Vector2, ref Vector2) A slightly more efficient way of setting a Vector3 than assignment. Declaration public static void SetVector(ref Vector2 toSet, ref Vector2 copy) Parameters Type Name Description Vector2 toSet Vector2 copy SetVector(ref Vector3, ref Vector3) A slightly more efficient way of setting a Vector3 than assignment. Declaration public static void SetVector(ref Vector3 toSet, ref Vector3 toCopy) Parameters Type Name Description Vector3 toSet Vector3 toCopy ShuffleList<H>(IList<H>, Int32) Shuffles the list. Declaration public static void ShuffleList<H>(IList<H> list, int upTo = -1) Parameters Type Name Description IList <H> list The list to shuffle. Int32 upTo Number of elements to shuffle, starting at index 0. Elements outside of this range maybe be shuffled between this range as well. If negative, will shuffle all list elements. Type Parameters Name Description H The list type parameter."
  },
  "api/OmiyaGames.HsvColor.html": {
    "href": "api/OmiyaGames.HsvColor.html",
    "title": "Struct HsvColor | Common documentation",
    "keywords": "Struct HsvColor Displays the frame-rate in the upper-left hand corner of the screen. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public struct HsvColor Remarks Code by Jonathan Czeck from Unify Community: http://wiki.unity3d.com/index.php/HSBColor Licensed under Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0): http://creativecommons.org/licenses/by-sa/3.0/ Revision Description Date: 9/3/2015 Author: Jonathan Czeck Initial wiki version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Using Unity's own helper functions. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors HsvColor(Color) Constructor that converts to HsvColor . Declaration public HsvColor(Color col) Parameters Type Name Description Color col Color to convert. HsvColor(HsvColor) Clone constructor: creates a duplicate of col . Declaration public HsvColor(HsvColor col) Parameters Type Name Description HsvColor col Color to duplicate. HsvColor(Single, Single, Single, Single) Constructs a new color, setting Hue , Saturation , Value , and Alpha . Declaration public HsvColor(float h, float s, float v, float a = 1F) Parameters Type Name Description Single h Sets Hue . Single s Sets Saturation . Single v Sets Value . Single a Sets Alpha . Properties Alpha The alpha of the color, or its opacity. Set as a fraction between 0 and 1. Declaration public float Alpha { get; set; } Property Value Type Description Single Hue The hue of the color, or it's color type. Set as a fraction between 0 and 1. Declaration public float Hue { get; set; } Property Value Type Description Single Saturation The saturation of the color, or its \"intenseness.\" Set as a fraction between 0 and 1. Declaration public float Saturation { get; set; } Property Value Type Description Single Value The value of the color. Also known as lightness, brightness, etc. Set as a fraction between 0 and 1. Declaration public float Value { get; set; } Property Value Type Description Single Methods FromColor(Color) Converts to HsvColor . HsvColor(Color) Declaration public static HsvColor FromColor(Color color) Parameters Type Name Description Color color Color to convert. Returns Type Description HsvColor HsvColor equivalent of color . Lerp(HsvColor, HsvColor, Single) Linearly interpolates between two colors. Declaration public static HsvColor Lerp(HsvColor from, HsvColor to, float time) Parameters Type Name Description HsvColor from The start color. HsvColor to The end color. Single time A value between 0 to 1, with 0 as start, and 1 as end. Returns Type Description HsvColor A color in-between from and to , based on time . Examples Output depends on time in particular. For example: Lerp(from, to, 0f); ...would return just \"from.\" Similarly: Lerp(from, to, 1f); ...would return just \"to.\" Nautrally, it would follow that: Lerp(from, to, 0.5f); ...gives a color midway between \"from\" and \"to.\" ToColor(HsvColor, Boolean) Converts HsvColor to . Declaration public static Color ToColor(HsvColor color, bool isHdr = false) Parameters Type Name Description HsvColor color Color to convert. Boolean isHdr Flag indicating whether High-Definition Range is on. Returns Type Description Color equivalent of color . ToColor(Boolean) Converts this to a . Declaration public Color ToColor(bool isHdr = false) Parameters Type Name Description Boolean isHdr Flag indicating whether High-Definition Range is on. Returns Type Description Color equivalent. ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/OmiyaGames.html": {
    "href": "api/OmiyaGames.html",
    "title": "Namespace OmiyaGames | Common documentation",
    "keywords": "Namespace OmiyaGames Classes BidirectionalDictionary<KEY, VALUE> A two-direction dictionary where a key maps to a value, and vice versa. This does mean both keys and values must be unique. DefaultNumberAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. DefaultObjectAttribute Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. DefaultRangeAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a slider, allowing the user to change this value. EnumFlagsAttribute Makes an enum multi-selectable in the Unity editor with [EnumFlags]. FilePathAttribute Adds a browse button to the inspector to select a path. Simply add [FilePath] to a string. FolderPathAttribute Adds a browse button to the inspector to select a path. Simply add [FolderPath] to a string. Helpers A series of utilities used throughout the OmiyaGames namespace. ListSet<T> A list where all the elements are unique (i.e. a set). Note that due to its nature, null cannot be added into this collection. List<T> Dictionary<TKey,TValue> ProgressReport Helper method to report progress reports. Thread-safe. ThreadSafeInt RandomList<T> A list that shuffles its elements. Common example: int[] allNumbers = new int[] { 1, 2, 3, 4 }; RandomList<int> shuffledNumbers = new RandomList<int>(allNumbers); for(int i = 0; i < allNumbers.Length; ++i) { Debug.Log(shuffledNumbers.NextRandomElement); } ReadOnlyAttribute Makes a field read-only in the Unity editor with [ReadOnly]. ScenePathAttribute Makes a string field accept scenes-only in the Unity editor with [ScenePath]. SerializableHashSet<T> A serializable . Expose it on the inspector like a normal list. SerializableHelpers Helper methods for serialization. SerializableListSet<T> A serializable ListSet<T> . Expose it on the inspector like a normal list. SupportedPlatformsHelpers A class full of helper and extended methods for . SupportedPlatformsHelpers.PlatformSupportArgs Argument for event OnAfterIsSupportedNoArgs . ThreadSafe<T> Creates a thread-safe variable. Only works on primitives. ThreadSafeInt ThreadSafeLong ThreadSafeStringBuilder ThreadSafeInt An int version of ThreadSafe<T> with more performant helper methods. ThreadSafeLong A long version of ThreadSafe<T> with more performant helper methods. ThreadSafeStringBuilder Creates a thread-safe StringBuilder . Trackable<T> A value one can track changes to by using OnBeforeValueChanged and OnAfterValueChanged . TrackableDecorator<T> A helper class to implement ITrackable<T> . UndoHistory Records a list of previous actions, and allows user to undo or redo them. Structs HsvColor Displays the frame-rate in the upper-left hand corner of the screen. RandomList<T>.ElementFrequency Indicates the frequency an element is going to be added into the index list, The higher the frequency, the more often an element appears. Interfaces IEditorTrackable Interface used by editor to track changes. ITrackable<T> A value that allows tracking changes via C# events. UndoHistory.IRecord A record stored in UndoHistory . Enums Axis3D An enum representing an axis in 3D. Multiple axis can be combined in the Unity inspector using [EnumFlags] ( EnumFlagsAttribute ). DefaultNumberAttribute.Range Indicates whether the editor number is limited to being greater, less, or neither. FolderPathAttribute.RelativeTo The directory FolderPathAttribute should be set local to. SupportedPlatforms An enum indicating supported platforms. Can be multi-selected in the Unity Editor. SupportedPlatformsHelpers SupportedPlatformsDrawer Delegates Helpers.ChangeEvent<SOURCE, VALUE> Delegate for tracking changes to a single value. ITrackable<T>.ChangeEvent Delegate for tracking changes to Value . SupportedPlatformsHelpers.OverridePlatformSupport Delegate for OnAfterIsSupportedNoArgs event. SupportedPlatformsHelpers.PlatformSupportArgs"
  },
  "api/OmiyaGames.IEditorTrackable.html": {
    "href": "api/OmiyaGames.IEditorTrackable.html",
    "title": "Interface IEditorTrackable | Common documentation",
    "keywords": "Interface IEditorTrackable Interface used by editor to track changes. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public interface IEditorTrackable Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 12/5/2021 Author: Taro Omiya Initial version. Properties EditorValue Called from editor when change is detected. Declaration object EditorValue { get; } Property Value Type Description Object Methods OnValueChangedInEditor(Object, Object) Called from editor when change is detected. Declaration void OnValueChangedInEditor(object oldValue, object newValue) Parameters Type Name Description Object oldValue The value before inspector changes were made. Object newValue The new value after inspector changes were made."
  },
  "api/OmiyaGames.ITrackable-1.ChangeEvent.html": {
    "href": "api/OmiyaGames.ITrackable-1.ChangeEvent.html",
    "title": "Delegate ITrackable<T>.ChangeEvent | Common documentation",
    "keywords": "Delegate ITrackable<T>.ChangeEvent Delegate for tracking changes to Value . Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public delegate void ChangeEvent(T oldValue, T newValue); Parameters Type Name Description T oldValue T newValue"
  },
  "api/OmiyaGames.ITrackable-1.html": {
    "href": "api/OmiyaGames.ITrackable-1.html",
    "title": "Interface ITrackable<T> | Common documentation",
    "keywords": "Interface ITrackable<T> A value that allows tracking changes via C# events. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public interface ITrackable<T> Type Parameters Name Description T Type of value being tracked. Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/4/2021 Author: Taro Omiya Initial version. Properties HasValue Flag indicating if Value is not null. Declaration bool HasValue { get; } Property Value Type Description Boolean Value The value this class represents. Declaration T Value { get; set; } Property Value Type Description T Events OnAfterValueChanged Event called after the value has changed. Will be called even if the new value is the same as old. Declaration event ITrackable<T>.ChangeEvent OnAfterValueChanged Event Type Type Description ITrackable.ChangeEvent <> OnBeforeValueChanged Event called before the value has changed. Will be called even if the new value is the same as old. Declaration event ITrackable<T>.ChangeEvent OnBeforeValueChanged Event Type Type Description ITrackable.ChangeEvent <>"
  },
  "api/OmiyaGames.ListSet-1.html": {
    "href": "api/OmiyaGames.ListSet-1.html",
    "title": "Class ListSet<T> | Common documentation",
    "keywords": "Class ListSet<T> A list where all the elements are unique (i.e. a set). Note that due to its nature, null cannot be added into this collection. List<T> Dictionary<TKey,TValue> Inheritance Object ListSet<T> SerializableListSet<T> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ListSet<T> : ISet<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 1/23/2019 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Version: 1.2.2 Date: 2/19/2022 Author: Taro Omiya Using for exception handling. Constructors ListSet() Default constructor that sets up an empty list. Declaration public ListSet() ListSet(IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public ListSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer Comparer to check if two elements matches. ListSet(Int32) Constructor an empty list with initial capacity defined. Declaration public ListSet(int capacity) Parameters Type Name Description Int32 capacity Initial capacity of this list. ListSet(Int32, IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public ListSet(int capacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 capacity Initial capacity of this list. IEqualityComparer <T> comparer Comparer to check if two elements matches. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Gets or sets an element in the list. For the setter, if an element already in the list is inserted, an exception will be thrown. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description Boolean AsReadOnly() Declaration public ReadOnlyCollection<T> AsReadOnly() Returns Type Description ReadOnlyCollection <T> Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex ExceptWith(IEnumerable<T>) Not implemented! Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IndexOf(T) Gets the index of an item, or -1 if it isn't in the list. Declaration public int IndexOf(T item) Parameters Type Name Description T item The element to search through the list. Returns Type Description Int32 Index of an item, or -1 if it isn't in the list. Insert(Int32, T) Declaration public bool Insert(int index, T item) Parameters Type Name Description Int32 index T item Returns Type Description Boolean IntersectWith(IEnumerable<T>) Not implemented! Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other IsProperSubsetOf(IEnumerable<T>) Not implemented! Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsProperSupersetOf(IEnumerable<T>) Not implemented! Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSubsetOf(IEnumerable<T>) Not implemented! Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSupersetOf(IEnumerable<T>) Not implemented! Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean Overlaps(IEnumerable<T>) Not implemented! Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index SetEquals(IEnumerable<T>) Not implemented! Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean SymmetricExceptWith(IEnumerable<T>) Not implemented! Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other UnionWith(IEnumerable<T>) Not implemented! Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other"
  },
  "api/OmiyaGames.ProgressReport.html": {
    "href": "api/OmiyaGames.ProgressReport.html",
    "title": "Class ProgressReport | Common documentation",
    "keywords": "Class ProgressReport Helper method to report progress reports. Thread-safe. ThreadSafeInt Inheritance Object ProgressReport Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ProgressReport Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/2/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ProgressReport(Int32) Constructor to set TotalSteps . Declaration public ProgressReport(int totalSteps = 1) Parameters Type Name Description Int32 totalSteps Sets TotalSteps . Exceptions Type Condition ArgumentException If totalSteps is less than 1. Properties CurrentStep Amount of progress made, out of TotalSteps . Declaration public long CurrentStep { get; set; } Property Value Type Description Int64 ProgressPercent Progress made, as a fraction between 0 and 1. Declaration public float ProgressPercent { get; } Property Value Type Description Single TotalSteps The total number of steps to make progress in. Declaration public long TotalSteps { get; } Property Value Type Description Int64 Methods IncrementCurrentStep() Increases CurrentStep by 1. Declaration public void IncrementCurrentStep() Reset() Sets CurrentStep to 0. Declaration public void Reset() SetTotalSteps(Int64) Resets current step, then sets TotalSteps . Declaration public void SetTotalSteps(long newTotalSteps) Parameters Type Name Description Int64 newTotalSteps Sets TotalSteps Exceptions Type Condition ArgumentException If newTotalSteps is less than 1."
  },
  "api/OmiyaGames.RandomList-1.ElementFrequency.html": {
    "href": "api/OmiyaGames.RandomList-1.ElementFrequency.html",
    "title": "Struct RandomList<T>.ElementFrequency | Common documentation",
    "keywords": "Struct RandomList<T>.ElementFrequency Indicates the frequency an element is going to be added into the index list, The higher the frequency, the more often an element appears. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ElementFrequency Constructors ElementFrequency(T, Int32) Declaration public ElementFrequency(T element, int frequency = 1) Parameters Type Name Description T element Int32 frequency Properties Element The element this struct is representing. Declaration public T Element { get; set; } Property Value Type Description T Frequency The number of times this element appears in the shuffled index list. This value is never below 1 Declaration public int Frequency { get; set; } Property Value Type Description Int32 Methods Equals(Object) Checks the type of argument. If it's another RandomList<T>.ElementFrequency , compares both Element and Frequency . If it's T , compares if Element matches with the argument. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to. Returns Type Description Boolean If it's another RandomList<T>.ElementFrequency , returns true if both Element and Frequency matches. If it's T , returns true if Element matches with the argument. Otherwise, false. Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/OmiyaGames.RandomList-1.html": {
    "href": "api/OmiyaGames.RandomList-1.html",
    "title": "Class RandomList<T> | Common documentation",
    "keywords": "Class RandomList<T> A list that shuffles its elements. Common example: int[] allNumbers = new int[] { 1, 2, 3, 4 }; RandomList<int> shuffledNumbers = new RandomList<int>(allNumbers); for(int i = 0; i < allNumbers.Length; ++i) { Debug.Log(shuffledNumbers.NextRandomElement); } Inheritance Object RandomList<T> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public class RandomList<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 8/18/2015 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.2-preview.1 Date: 4/5/2020 Author: Taro Omiya Updating to be serializable...albeit, in Unity 2020.1. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Upgrading documentation to be DocFX compatible. Version: 1.2.1 Date: 2/18/2022 Author: Taro Omiya Updating CurrentElement to always flag shuffle if list Count is 1 or less. Version: 1.2.2 Date: 2/18/2022 Author: Taro Omiya Using for throwing argument exceptions. Constructors RandomList() Creates an empty list. Declaration public RandomList() RandomList(Dictionary<T, Int32>) Copies the elements of a dictionary into a new RandomList<T> . Declaration public RandomList(Dictionary<T, int> frequencyMap) Parameters Type Name Description Dictionary <T, Int32 > frequencyMap Map of elements to copy over into this list. Will also copy over its Comparer . RandomList(IDictionary<T, Int32>, IEqualityComparer<T>) Copies the elements of a dictionary into a new RandomList<T> . Declaration public RandomList(IDictionary<T, int> frequencyMap, IEqualityComparer<T> comparer) Parameters Type Name Description IDictionary <T, Int32 > frequencyMap Map of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IEqualityComparer<T>) Creates an empty list, utilizing a comparer to detect overlap when running Add(T, Int32) and Remove(T, Int32) . Declaration public RandomList(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IList<T>) Copies the elements of the list, each with equal frequency of appearance, into a new RandomList<T> . Declaration public RandomList(IList<T> list) Parameters Type Name Description IList <T> list List of elements to copy over into this list. RandomList(IList<T>, IEqualityComparer<T>) Copies the elements of the list, each with equal frequency of appearance, into a new RandomList<T> . Declaration public RandomList(IList<T> list, IEqualityComparer<T> comparer) Parameters Type Name Description IList <T> list List of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IList<RandomList<T>.ElementFrequency>) Copies the elements of a list into a new RandomList<T> . Declaration public RandomList(IList<RandomList<T>.ElementFrequency> list) Parameters Type Name Description IList < RandomList.ElementFrequency <>> list List of elements to copy over into this list. RandomList(IList<RandomList<T>.ElementFrequency>, IEqualityComparer<T>) Copies the elements of a list into a new RandomList<T> . Declaration public RandomList(IList<RandomList<T>.ElementFrequency> list, IEqualityComparer<T> comparer) Parameters Type Name Description IList < RandomList.ElementFrequency <>> list List of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(Int32) Creates an empty list, starting with the defined capacity. Declaration public RandomList(int initialCapacity) Parameters Type Name Description Int32 initialCapacity Initial size of this list RandomList(Int32, IEqualityComparer<T>) Creates an empty list, starting with the defined capacity and utilizing a comparer to detect overlap when running Add(T, Int32) and Remove(T, Int32) . Declaration public RandomList(int initialCapacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 initialCapacity Initial size of this list IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. Properties Capacity Capacity of this list. This value automatically increases as more elements are added to this list. Declaration public int Capacity { get; } Property Value Type Description Int32 Comparer Comparer used to check whether the list already contains an item or not. Declaration public IEqualityComparer<T> Comparer { get; } Property Value Type Description IEqualityComparer <T> Count Number of unique elements in this list. Disregards the Frequency value. Declaration public int Count { get; } Property Value Type Description Int32 CurrentElement Grabs the currently focused element in the list. Declaration public T CurrentElement { get; } Property Value Type Description T Remarks This method shuffles ShuffledIndexes if OmiyaGames.RandomList`1.index is outside of the list's range. See Also NextRandomElement ElementToIndexMap Dictionary mapping an element to the index in OmiyaGames.RandomList`1.elementsList . Declaration protected Dictionary<T, int> ElementToIndexMap { get; } Property Value Type Description Dictionary <T, Int32 > IsReadOnly Always returns false. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean false NextRandomElement Grabs the next random element from the list. Declaration public T NextRandomElement { get; } Property Value Type Description T See Also CurrentElement ShuffledIndexes Contains a list of whole numbers corresponding to an index in OmiyaGames.RandomList`1.elementsList , shuffled. Note that the Frequency will affect the number of times an index appears in this list. Declaration protected List<int> ShuffledIndexes { get; } Property Value Type Description List < Int32 > Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item Add(T, Int32) Declaration public virtual void Add(T item, int numberOfItemsToAdd) Parameters Type Name Description T item Int32 numberOfItemsToAdd Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex CopyTo(RandomList<T>.ElementFrequency[], Int32) Declaration public void CopyTo(RandomList<T>.ElementFrequency[] array, int arrayIndex) Parameters Type Name Description RandomList.ElementFrequency <>[] array Int32 arrayIndex GetFrequency(T) Gets the number of instances an item appears in this list. Declaration public int GetFrequency(T item) Parameters Type Name Description T item Returns Type Description Int32 Number of instances an item appears in this list. IncrementFrequency(Int32, Int32) Increments the frequency in an element in OmiyaGames.RandomList`1.elementsList . Accepts negative frequency values (which, of course, causes the method to decrement the item's frequency). Declaration protected int IncrementFrequency(int itemIndex, int frequency) Parameters Type Name Description Int32 itemIndex Index of the element to increment frequency of. Int32 frequency The change in frequency. Returns Type Description Int32 The sum of the old and new frequency values. IndexOf(T) Gets index of the first instance of item from OmiyaGames.RandomList`1.elementsList . Declaration protected int IndexOf(T item) Parameters Type Name Description T item Element in OmiyaGames.RandomList`1.elementsList to search for. Returns Type Description Int32 Index of item in OmiyaGames.RandomList`1.elementsList , or -1 if not found. Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean Remove(T, Int32) Declaration public virtual int Remove(T item, int numberOfItemsToRemove) Parameters Type Name Description T item Int32 numberOfItemsToRemove Returns Type Description Int32 RemoveAllOf(T) Removes all instances of an item from the list. Declaration public int RemoveAllOf(T item) Parameters Type Name Description T item The item to remove from the list. Returns Type Description Int32 Number of instanes of item removed. RemoveFromIndexList(Int32, Int32) Removes all instances of a value from ShuffledIndexes , and decrements any other value greater than removeIndex. Declaration protected virtual void RemoveFromIndexList(int removeIndex, int numberOfItemsToRemove) Parameters Type Name Description Int32 removeIndex The value to remove from ShuffledIndexes . Int32 numberOfItemsToRemove Reshuffle() Flags the list to reshuffle next time when CurrentElement or NextRandomElement gets called. Declaration public void Reshuffle() SyncAllMapsAndLists() Syncs the information in OmiyaGames.RandomList`1.elementsList to ElementToIndexMap and ShuffledIndexes . As the name of the method implies, this is potentially a costly operation; use it sparringly! Declaration protected virtual void SyncAllMapsAndLists()"
  },
  "api/OmiyaGames.ReadOnlyAttribute.html": {
    "href": "api/OmiyaGames.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Common documentation",
    "keywords": "Class ReadOnlyAttribute Makes a field read-only in the Unity editor with [ReadOnly]. Inheritance Object ReadOnlyAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ReadOnlyAttribute : PropertyAttribute Remarks Code by It3ration from Unity Answers: http://answers.unity3d.com/questions/489942/how-to-make-a-readonly-property-in-inspector.html Revision Description Date: 10/1/2014 Author: It3ration Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX."
  },
  "api/OmiyaGames.ScenePathAttribute.html": {
    "href": "api/OmiyaGames.ScenePathAttribute.html",
    "title": "Class ScenePathAttribute | Common documentation",
    "keywords": "Class ScenePathAttribute Makes a string field accept scenes-only in the Unity editor with [ScenePath]. Inheritance Object ScenePathAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ScenePathAttribute : PropertyAttribute Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 12/28/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ScenePathAttribute() Default constructor. Declaration public ScenePathAttribute()"
  },
  "api/OmiyaGames.SerializableHashSet-1.html": {
    "href": "api/OmiyaGames.SerializableHashSet-1.html",
    "title": "Class SerializableHashSet<T> | Common documentation",
    "keywords": "Class SerializableHashSet<T> A serializable . Expose it on the inspector like a normal list. Inheritance Object SerializableHashSet<T> Implements ISerializationCallbackReceiver Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class SerializableHashSet<T> : ISet<T>, ICollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/5/2022 Author: Taro Omiya Initial version. Constructors SerializableHashSet() Default constructor that sets up an empty set. Declaration public SerializableHashSet() SerializableHashSet(IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public SerializableHashSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer Comparer to check if two elements matches. SerializableHashSet(Int32) Constructor an empty set with initial capacity defined. Declaration public SerializableHashSet(int capacity) Parameters Type Name Description Int32 capacity Initial capacity of this list. SerializableHashSet(Int32, IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public SerializableHashSet(int capacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 capacity Initial capacity of this set. IEqualityComparer <T> comparer Comparer to check if two elements matches. Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean IsSerializing Indicates if this collection is in the middle of serializing. Declaration public bool IsSerializing { get; } Property Value Type Description Boolean Methods Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description Boolean Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex ExceptWith(IEnumerable<T>) Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IntersectWith(IEnumerable<T>) Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other IsProperSubsetOf(IEnumerable<T>) Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsProperSupersetOf(IEnumerable<T>) Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSubsetOf(IEnumerable<T>) Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSupersetOf(IEnumerable<T>) Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Overlaps(IEnumerable<T>) Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean SetEquals(IEnumerable<T>) Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean SymmetricExceptWith(IEnumerable<T>) Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other UnionWith(IEnumerable<T>) Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Implements ISerializationCallbackReceiver"
  },
  "api/OmiyaGames.SerializableHelpers.html": {
    "href": "api/OmiyaGames.SerializableHelpers.html",
    "title": "Class SerializableHelpers | Common documentation",
    "keywords": "Class SerializableHelpers Helper methods for serialization. Inheritance Object SerializableHelpers Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public static class SerializableHelpers Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/6/2022 Author: Taro Omiya Initial version. Methods PushSerializedListIntoSet<T>(IList<T>, ISet<T>) Pushes the data from serializedList into setToSync . Declaration public static void PushSerializedListIntoSet<T>(IList<T> serializedList, ISet<T> setToSync) Parameters Type Name Description IList <T> serializedList The serialized list, used to display elements in the inspector. ISet <T> setToSync The original data. Type Parameters Name Description T PushSetIntoSerializedList<T>(ISet<T>, IList<T>) Pushes the data from baseSet into listToSerialize . Declaration public static void PushSetIntoSerializedList<T>(ISet<T> baseSet, IList<T> listToSerialize) Parameters Type Name Description ISet <T> baseSet The original data. IList <T> listToSerialize The serialized list, used to display elements in the inspector. Type Parameters Name Description T"
  },
  "api/OmiyaGames.SerializableListSet-1.html": {
    "href": "api/OmiyaGames.SerializableListSet-1.html",
    "title": "Class SerializableListSet<T> | Common documentation",
    "keywords": "Class SerializableListSet<T> A serializable ListSet<T> . Expose it on the inspector like a normal list. Inheritance Object ListSet <T> SerializableListSet<T> Implements ISerializationCallbackReceiver Inherited Members ListSet<T>.Item[Int32] ListSet<T>.Count ListSet<T>.IsReadOnly ListSet<T>.AsReadOnly() ListSet<T>.Clear() ListSet<T>.Contains(T) ListSet<T>.CopyTo(T[], Int32) ListSet<T>.GetEnumerator() ListSet<T>.IndexOf(T) ListSet<T>.Add(T) ListSet<T>.Insert(Int32, T) ListSet<T>.Remove(T) ListSet<T>.RemoveAt(Int32) ListSet<T>.ExceptWith(IEnumerable<T>) ListSet<T>.IntersectWith(IEnumerable<T>) ListSet<T>.IsProperSubsetOf(IEnumerable<T>) ListSet<T>.IsProperSupersetOf(IEnumerable<T>) ListSet<T>.IsSubsetOf(IEnumerable<T>) ListSet<T>.IsSupersetOf(IEnumerable<T>) ListSet<T>.Overlaps(IEnumerable<T>) ListSet<T>.SetEquals(IEnumerable<T>) ListSet<T>.SymmetricExceptWith(IEnumerable<T>) ListSet<T>.UnionWith(IEnumerable<T>) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class SerializableListSet<T> : ListSet<T>, ISet<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Remarks The MIT License (MIT) Copyright (c) 2022 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 2/5/2022 Author: Taro Omiya Initial version. Constructors SerializableListSet() Default constructor that sets up an empty list. Declaration public SerializableListSet() SerializableListSet(IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public SerializableListSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer Comparer to check if two elements matches. SerializableListSet(Int32) Constructor an empty list with initial capacity defined. Declaration public SerializableListSet(int capacity) Parameters Type Name Description Int32 capacity Initial capacity of this list. SerializableListSet(Int32, IEqualityComparer<T>) Constructor to set the IEqualityComparer<T> , used to check if two elements matches. Declaration public SerializableListSet(int capacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 capacity Initial capacity of this list. IEqualityComparer <T> comparer Comparer to check if two elements matches. Properties IsSerializing Indicates if this collection is in the middle of serializing. Declaration public bool IsSerializing { get; } Property Value Type Description Boolean Methods OnAfterDeserialize() Declaration public void OnAfterDeserialize() OnBeforeSerialize() Declaration public void OnBeforeSerialize() Implements ISerializationCallbackReceiver"
  },
  "api/OmiyaGames.SupportedPlatforms.html": {
    "href": "api/OmiyaGames.SupportedPlatforms.html",
    "title": "Enum SupportedPlatforms | Common documentation",
    "keywords": "Enum SupportedPlatforms An enum indicating supported platforms. Can be multi-selected in the Unity Editor. SupportedPlatformsHelpers SupportedPlatformsDrawer Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Flags] public enum SupportedPlatforms Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/12/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Initial version. Version: 0.1.4-preview.1 Date: 5/26/2020 Author: Taro Omiya Updating documentation to be more DocFX-friendly. Splitting up the SupportedPlatformsHelpers into a separate file Fields Name Description AllPlatforms Flag for all platforms. Android Support for . iOS Support for . Linux Support for . MacOS Support for . None Flag for no platforms. Web Support for . Windows Support for ."
  },
  "api/OmiyaGames.SupportedPlatformsHelpers.html": {
    "href": "api/OmiyaGames.SupportedPlatformsHelpers.html",
    "title": "Class SupportedPlatformsHelpers | Common documentation",
    "keywords": "Class SupportedPlatformsHelpers A class full of helper and extended methods for . Inheritance Object SupportedPlatformsHelpers Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public static class SupportedPlatformsHelpers Remarks The MIT License (MIT) Copyright (c) 2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 0.1.4-preview.1 Date: 5/26/2020 Author: Taro Omiya Initial version. Properties AllPlatformNames Gets a list of all the platform names. It is highly recommended to cache this value. Declaration public static string[] AllPlatformNames { get; } Property Value Type Description String [] NumberOfPlatforms Gets the number of flags set in SupportPlatforms . It is highly recommended to cache this value. Declaration public static int NumberOfPlatforms { get; } Property Value Type Description Int32 Methods IsSupported(SupportedPlatforms) Indicates if currentPlatforms matches the current build. OnAfterIsSupportedNoArgs Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms) Parameters Type Name Description SupportedPlatforms currentPlatforms Flag to check whether it supports this build. Returns Type Description Boolean True if currentPlatforms matches this build. IsSupported(SupportedPlatforms, SupportedPlatforms) Indicates if currentPlatforms matches singlePlatform . Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms, SupportedPlatforms singlePlatform) Parameters Type Name Description SupportedPlatforms currentPlatforms Flag to check whether it supports singlePlatform . SupportedPlatforms singlePlatform Platform to check against currentPlatforms . Returns Type Description Boolean True if currentPlatforms contains singlePlatform . IsSupported(SupportedPlatforms, RuntimePlatform) Indicates if currentPlatforms matches platform . Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms, RuntimePlatform platform) Parameters Type Name Description SupportedPlatforms currentPlatforms Flag to check whether it supports platform . RuntimePlatform platform Platform to check against currentPlatforms . Returns Type Description Boolean True if currentPlatforms contains platform . Events OnAfterIsSupportedNoArgs Called towards the end of IsSupported(SupportedPlatforms) . Allows changing the return value with IsSupported . Declaration public static event SupportedPlatformsHelpers.OverridePlatformSupport OnAfterIsSupportedNoArgs Event Type Type Description SupportedPlatformsHelpers.OverridePlatformSupport"
  },
  "api/OmiyaGames.SupportedPlatformsHelpers.OverridePlatformSupport.html": {
    "href": "api/OmiyaGames.SupportedPlatformsHelpers.OverridePlatformSupport.html",
    "title": "Delegate SupportedPlatformsHelpers.OverridePlatformSupport | Common documentation",
    "keywords": "Delegate SupportedPlatformsHelpers.OverridePlatformSupport Delegate for OnAfterIsSupportedNoArgs event. SupportedPlatformsHelpers.PlatformSupportArgs Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public delegate void OverridePlatformSupport(SupportedPlatforms source, SupportedPlatformsHelpers.PlatformSupportArgs args); Parameters Type Name Description SupportedPlatforms source The source of the event call. SupportedPlatformsHelpers.PlatformSupportArgs args Arguments for the event. Can be edited to change what OnAfterIsSupportedNoArgs returns."
  },
  "api/OmiyaGames.SupportedPlatformsHelpers.PlatformSupportArgs.html": {
    "href": "api/OmiyaGames.SupportedPlatformsHelpers.PlatformSupportArgs.html",
    "title": "Class SupportedPlatformsHelpers.PlatformSupportArgs | Common documentation",
    "keywords": "Class SupportedPlatformsHelpers.PlatformSupportArgs Argument for event OnAfterIsSupportedNoArgs . Inheritance Object SupportedPlatformsHelpers.PlatformSupportArgs Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class PlatformSupportArgs : EventArgs Constructors PlatformSupportArgs(RuntimePlatform, Boolean) Constructor to set all property values. Declaration public PlatformSupportArgs(RuntimePlatform currentPlatform, bool returnFlag) Parameters Type Name Description RuntimePlatform currentPlatform Sets BuildPlatform Boolean returnFlag Sets IsSupported Properties BuildPlatform The current build platform. Declaration public RuntimePlatform BuildPlatform { get; } Property Value Type Description RuntimePlatform IsSupported What the event will be returning. Editing this value will also affect what IsSupported(SupportedPlatforms) will return. Declaration public bool IsSupported { get; set; } Property Value Type Description Boolean"
  },
  "api/OmiyaGames.ThreadSafe-1.html": {
    "href": "api/OmiyaGames.ThreadSafe-1.html",
    "title": "Class ThreadSafe<T> | Common documentation",
    "keywords": "Class ThreadSafe<T> Creates a thread-safe variable. Only works on primitives. ThreadSafeInt ThreadSafeLong ThreadSafeStringBuilder Inheritance Object ThreadSafe<T> ThreadSafeInt ThreadSafeLong ThreadSafeStringBuilder Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafe<T> Type Parameters Name Description T Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/2/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ThreadSafe() Default constructor: sets the Value to default. Declaration public ThreadSafe() ThreadSafe(T) Constructor to set the initial value of Value . Declaration public ThreadSafe(T value) Parameters Type Name Description T value Sets Value . Fields value The value variable. Declaration protected T value Field Value Type Description T Properties ThreadLock The lock. Declaration protected object ThreadLock { get; } Property Value Type Description Object Value Thread-safe access to value. Declaration public T Value { get; set; } Property Value Type Description T Methods Equals(Object) Checks the type of argument. If it's another ThreadSafe<T> , compares the two Value . If it's T , compares it with Value in a thread-safe manner. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to. Returns Type Description Boolean If it's another ThreadSafe<T> , returns true if two wrapper's Value matches. If it's T , returns true if matches with the argument. Otherwise, false. Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString()"
  },
  "api/OmiyaGames.ThreadSafeInt.html": {
    "href": "api/OmiyaGames.ThreadSafeInt.html",
    "title": "Class ThreadSafeInt | Common documentation",
    "keywords": "Class ThreadSafeInt An int version of ThreadSafe<T> with more performant helper methods. Inheritance Object ThreadSafe < Int32 > ThreadSafeInt Inherited Members ThreadSafe<Int32>.value ThreadSafe<Int32>.ThreadLock ThreadSafe<Int32>.Value ThreadSafe<Int32>.ToString() ThreadSafe<Int32>.GetHashCode() ThreadSafe<Int32>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeInt : ThreadSafe<int> Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/2/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ThreadSafeInt() Default constructor that sets Value to 0. Declaration public ThreadSafeInt() ThreadSafeInt(Int32) Constructor that sets Value . Declaration public ThreadSafeInt(int value) Parameters Type Name Description Int32 value The initial Value should be set to. Methods Add(Int32) A more performant version of Value += addBy. Declaration public void Add(int addBy) Parameters Type Name Description Int32 addBy Decrement() A more performant version of Value --. Declaration public void Decrement() Increment() A more performant version of Value ++. Declaration public void Increment() Subtract(Int32) A more performant version of Value -= subtractBy. Declaration public void Subtract(int subtractBy) Parameters Type Name Description Int32 subtractBy"
  },
  "api/OmiyaGames.ThreadSafeLong.html": {
    "href": "api/OmiyaGames.ThreadSafeLong.html",
    "title": "Class ThreadSafeLong | Common documentation",
    "keywords": "Class ThreadSafeLong A long version of ThreadSafe<T> with more performant helper methods. Inheritance Object ThreadSafe < Int64 > ThreadSafeLong Inherited Members ThreadSafe<Int64>.value ThreadSafe<Int64>.ThreadLock ThreadSafe<Int64>.Value ThreadSafe<Int64>.ToString() ThreadSafe<Int64>.GetHashCode() ThreadSafe<Int64>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeLong : ThreadSafe<long> Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/2/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ThreadSafeLong() Default constructor that sets Value to 0. Declaration public ThreadSafeLong() ThreadSafeLong(Int64) Constructor that sets Value . Declaration public ThreadSafeLong(long value) Parameters Type Name Description Int64 value The initial Value should be set to. Methods Add(Int32) A more performant version of Value += addBy. Declaration public void Add(int addBy) Parameters Type Name Description Int32 addBy Decrement() A more performant version of Value --. Declaration public void Decrement() Increment() A more performant version of Value ++. Declaration public void Increment() Subtract(Int32) A more performant version of Value -= subtractBy. Declaration public void Subtract(int subtractBy) Parameters Type Name Description Int32 subtractBy"
  },
  "api/OmiyaGames.ThreadSafeStringBuilder.html": {
    "href": "api/OmiyaGames.ThreadSafeStringBuilder.html",
    "title": "Class ThreadSafeStringBuilder | Common documentation",
    "keywords": "Class ThreadSafeStringBuilder Creates a thread-safe StringBuilder . Inheritance Object ThreadSafe < StringBuilder > ThreadSafeStringBuilder Inherited Members ThreadSafe<StringBuilder>.value ThreadSafe<StringBuilder>.ThreadLock ThreadSafe<StringBuilder>.Value ThreadSafe<StringBuilder>.ToString() ThreadSafe<StringBuilder>.GetHashCode() ThreadSafe<StringBuilder>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeStringBuilder : ThreadSafe<StringBuilder> Remarks The MIT License (MIT) Copyright (c) 2014-2020 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 10/2/2018 Author: Taro Omiya Initial version. Version: 0.1.0-preview.1 Date: 3/25/2020 Author: Taro Omiya Converted the class to a package. Version: 0.1.4-preview.1 Date: 5/27/2020 Author: Taro Omiya Updating documentation to be compatible with DocFX. Constructors ThreadSafeStringBuilder() Default constructor: creates an empty StringBuilder . Declaration public ThreadSafeStringBuilder() ThreadSafeStringBuilder(Int32) Sets up the initial capacity for StringBuilder . Declaration public ThreadSafeStringBuilder(int capacity) Parameters Type Name Description Int32 capacity Properties Length Length of string. Same as Length . Declaration public int Length { get; } Property Value Type Description Int32 Methods Append(String) Same as Append(String) . Declaration public void Append(string append) Parameters Type Name Description String append AppendLine() Same as AppendLine() . Declaration public void AppendLine() Clear() Same as Clear() . Declaration public void Clear() Insert(Int32, String) Same as Insert(Int32, String) . Declaration public void Insert(int index, string insert) Parameters Type Name Description Int32 index String insert"
  },
  "api/OmiyaGames.Trackable-1.html": {
    "href": "api/OmiyaGames.Trackable-1.html",
    "title": "Class Trackable<T> | Common documentation",
    "keywords": "Class Trackable<T> A value one can track changes to by using OnBeforeValueChanged and OnAfterValueChanged . Inheritance Object TrackableDecorator <T> Trackable<T> Implements ITrackable <T> IEditorTrackable Inherited Members TrackableDecorator<T>.HasValue Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public class Trackable<T> : TrackableDecorator<T>, ITrackable<T>, IEditorTrackable Type Parameters Name Description T Type of value being tracked. Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/28/2021 Author: Taro Omiya Initial version. Constructors Trackable() Default constructor. Declaration public Trackable() Trackable(T) Constructor to set the initial value. No events will be called. Declaration public Trackable(T value) Parameters Type Name Description T value The initial value. Properties EditorValue Called from editor when change is detected. Declaration public object EditorValue { get; } Property Value Type Description Object Value The value this class represents. Declaration public override T Value { get; set; } Property Value Type Description T Overrides OmiyaGames.TrackableDecorator<T>.Value Methods OnValueChangedInEditor(Object, Object) Called from editor when change is detected. Declaration public void OnValueChangedInEditor(object oldValue, object newValue) Parameters Type Name Description Object oldValue The value before inspector changes were made. Object newValue The new value after inspector changes were made. Remarks Arguments may not be updated to the latest if T is a SerializableAttribute class or struct instance. Events OnAfterValueChanged Event called after the value has changed. Will be called even if the new value is the same as old. Declaration public override event ITrackable<T>.ChangeEvent OnAfterValueChanged Event Type Type Description ITrackable.ChangeEvent <> Overrides OmiyaGames.TrackableDecorator<T>.OnAfterValueChanged Remarks This event will also be called from the editor, although arguments may not be updated to the latest if T is a SerializableAttribute class or struct instance. OnBeforeValueChanged Event called before the value has changed. Will be called even if the new value is the same as old. Declaration public override event ITrackable<T>.ChangeEvent OnBeforeValueChanged Event Type Type Description ITrackable.ChangeEvent <> Overrides OmiyaGames.TrackableDecorator<T>.OnBeforeValueChanged Operators Implicit(Trackable<T> to T) Converts a Trackable<T> to its value type. Declaration public static implicit operator T(Trackable<T> trackable) Parameters Type Name Description Trackable <T> trackable Returns Type Description T Implements ITrackable<T> IEditorTrackable"
  },
  "api/OmiyaGames.TrackableDecorator-1.html": {
    "href": "api/OmiyaGames.TrackableDecorator-1.html",
    "title": "Class TrackableDecorator<T> | Common documentation",
    "keywords": "Class TrackableDecorator<T> A helper class to implement ITrackable<T> . Inheritance Object TrackableDecorator<T> Trackable<T> Implements ITrackable <T> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public abstract class TrackableDecorator<T> : ITrackable<T> Type Parameters Name Description T Type of value being tracked. Remarks The MIT License (MIT) Copyright (c) 2014-2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Date: 6/28/2021 Author: Taro Omiya Initial version. Properties HasValue Flag indicating if Value is not null. Declaration public bool HasValue { get; } Property Value Type Description Boolean Value The value this class represents. Declaration public abstract T Value { get; set; } Property Value Type Description T Events OnAfterValueChanged Event called after the value has changed. Will be called even if the new value is the same as old. Declaration public abstract event ITrackable<T>.ChangeEvent OnAfterValueChanged Event Type Type Description ITrackable.ChangeEvent <> OnBeforeValueChanged Event called before the value has changed. Will be called even if the new value is the same as old. Declaration public abstract event ITrackable<T>.ChangeEvent OnBeforeValueChanged Event Type Type Description ITrackable.ChangeEvent <> Implements ITrackable<T>"
  },
  "api/OmiyaGames.UndoHistory.html": {
    "href": "api/OmiyaGames.UndoHistory.html",
    "title": "Class UndoHistory | Common documentation",
    "keywords": "Class UndoHistory Records a list of previous actions, and allows user to undo or redo them. Inheritance Object UndoHistory Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class UndoHistory : IReadOnlyCollection<UndoHistory.IRecord>, IEnumerable<UndoHistory.IRecord>, IEnumerable Remarks The MIT License (MIT) Copyright (c) 2021 Omiya Games Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. Revision Description Version: 1.1.0 Date: 11/27/2021 Author: Taro Omiya Initial version. Version: 1.2.2 Date: 2/19/2022 Author: Taro Omiya Using for exception handling. Constructors UndoHistory(Int32) Constructs an Undo history. Declaration public UndoHistory(int capacity = 2147483647) Parameters Type Name Description Int32 capacity How many records this list stores. Defaults to MaxValue Fields DefaultCapacity Declaration public const int DefaultCapacity = 2147483647 Field Value Type Description Int32 Properties CanRedo Indicates whether there's an action to redo. Declaration public bool CanRedo { get; } Property Value Type Description Boolean CanUndo Indicates whether there's an action to undo. Declaration public bool CanUndo { get; } Property Value Type Description Boolean Capacity The max number of actions stored. Declaration public int Capacity { get; } Property Value Type Description Int32 Count Actual number of actions stored. Declaration public int Count { get; } Property Value Type Description Int32 History History of actions, up to Capacity . First node is oldest, while last is latest. Declaration protected LinkedList<UndoHistory.IRecord> History { get; } Property Value Type Description LinkedList < UndoHistory.IRecord > RedoMarker The node in History that will call. Declaration protected LinkedListNode<UndoHistory.IRecord> RedoMarker { get; } Property Value Type Description LinkedListNode < UndoHistory.IRecord > RedoRecord Provides the description of what will be redone, or null if can't redo. Declaration public UndoHistory.IRecord RedoRecord { get; } Property Value Type Description UndoHistory.IRecord UndoMarker The node in History that will call. Declaration protected virtual LinkedListNode<UndoHistory.IRecord> UndoMarker { get; set; } Property Value Type Description LinkedListNode < UndoHistory.IRecord > UndoRecord The record that would be called by , or null if can't undo. Declaration public UndoHistory.IRecord UndoRecord { get; } Property Value Type Description UndoHistory.IRecord Methods Add(UndoHistory.IRecord) TODO Declaration public virtual void Add(UndoHistory.IRecord record) Parameters Type Name Description UndoHistory.IRecord record Clear() TODO Declaration public virtual void Clear() GetEnumerator() Declaration public IEnumerator<UndoHistory.IRecord> GetEnumerator() Returns Type Description IEnumerator < UndoHistory.IRecord > Redo(Object) TODO Declaration public virtual bool Redo(object source) Parameters Type Name Description Object source Returns Type Description Boolean Undo(Object) TODO Declaration public virtual bool Undo(object source) Parameters Type Name Description Object source Returns Type Description Boolean Events OnAfterChanged TODO Declaration public event Action<UndoHistory> OnAfterChanged Event Type Type Description Action < UndoHistory > OnAfterRedo TODO Declaration public event Action<object, UndoHistory> OnAfterRedo Event Type Type Description Action < Object , UndoHistory > OnAfterUndo TODO Declaration public event Action<object, UndoHistory> OnAfterUndo Event Type Type Description Action < Object , UndoHistory > OnBeforeChanged TODO Declaration public event Action<UndoHistory> OnBeforeChanged Event Type Type Description Action < UndoHistory > OnBeforeRedo TODO Declaration public event Action<object, UndoHistory> OnBeforeRedo Event Type Type Description Action < Object , UndoHistory > OnBeforeUndo TODO Declaration public event Action<object, UndoHistory> OnBeforeUndo Event Type Type Description Action < Object , UndoHistory >"
  },
  "api/OmiyaGames.UndoHistory.IRecord.html": {
    "href": "api/OmiyaGames.UndoHistory.IRecord.html",
    "title": "Interface UndoHistory.IRecord | Common documentation",
    "keywords": "Interface UndoHistory.IRecord A record stored in UndoHistory . Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public interface IRecord Properties Description Description of this action. Declaration string Description { get; } Property Value Type Description String Methods OnRedo(Object, UndoHistory) Called by . Declaration void OnRedo(object source, UndoHistory history) Parameters Type Name Description Object source The caller of this method. UndoHistory history The history this record is in. OnUndo(Object, UndoHistory) Called by . Declaration void OnUndo(object source, UndoHistory history) Parameters Type Name Description Object source The caller of this method. UndoHistory history The history this record is in."
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Common | Common documentation",
    "keywords": "Omiya Games - Common Common scripts used within Omiya Games ' many tools and libraries. Some useful tools that uses this package: Multiplatform Build Settings Web Security Cryptography Install There are two common methods for installing this package. Through Unity Package Manager Unity's own Package Manager supports importing packages through a URL to a Git repo : First, on this repository page, click the \"Clone or download\" button, and copy over this repository's HTTPS URL. Then click on the + button on the upper-left-hand corner of the Package Manager, select \"Add package from git URL...\" on the context menu, then paste this repo's URL! While easy and straightforward, this method has a few major downside: it does not support dependency resolution and package upgrading when a new version is released. To add support for that, the following method is recommended: Through OpenUPM Installing via OpenUPM's command line tool is recommended because it supports dependency resolution, upgrading, and downgrading this package. If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.common Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2014-2022 Omiya Games"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log | Common documentation",
    "keywords": "Change Log 1.2.2 Refactor: using nameof() for any argument-related exceptions. 1.2.1 Bug Fix: slightly fixing how a random element is grabbed from RandomList : if CurrentElement or NextElement is called while list is empty or only has one element, the reshuffle flag is now set in case the coder adds new elements to the list. 1.2.0 New Feature: added new class, SerializableHashSet -- a Set that can be adjusted in the inspector. New Feature: added new class, SerializableListSet -- a sorted Set that can be adjusted in the inspector. New Enhancement: allowing edits to Trackables from the inspector trigger events. New Enhancement: improving inspector interface for RandomList . 1.1.0 New Feature: added new class, UndoHistory New Enhancement: added new helper function, Helpers.Destroy(Object) , which actually was copy-pasted from Unity's Core RP Library package. 1.0.0 Bumping up the version number to stable, given this library has been battle tested for long enough. 0.2.0-preview.2 Enhancment: upgrading the assembly definitions and package files. 0.2.0-preview.1 New Feature: added new VisualElements, Spacer.cs and ProjectSettingsHeader.cs . 0.1.4-preview.1 New Enhancement: added XML documentation comments on all publicly accessible info in every script. New Enhancement: added method Helpers.RemoveDiacritics(string, StringBuilder) to remove invalid characters from a file name. Removed Enhancement: function Helpers.ShortenUrl(string) is moved to Web package . Documentation #11: adding suggestions on packages that's more useful that uses this one as dependencies. 0.1.3-preview.1 New Feature #6: added unit tests for BidirectionalDictionary.cs , TestBidirectionalDictionary.cs New Enhancement: Integrated DocFX auto-generated documentation, in favor of Doxygen. New Enhancement: Integrated Github Action for mirroring. 0.1.2-preview.1 New Feature #5: added unit tests for RandomList.cs , TestRandomList.cs New Enhancement #2: for performance, RandomList.cs now stores a list of element-frequency pairs, rather than only the element themselves. Each element has to be unique; the paired frequency indicates how many times that element will appear in one cycle of iteration. 0.1.1-preview.1 Typo Fix: fixing typo, \"verison\" to \"version,\" on all source code documentation. Documentation: changed the format of the Doxygen-generated HTML file to have a sidebar. 0.1.0-preview.2 Documentation: added author information to package.json . Documentation: added supported Unity release in package.json . 0.1.0-preview.1 Initial commit, split off from the Template Unity Project ."
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Common documentation",
    "keywords": "This folder contains markdown files listed under \"Manual\" section in the documentation. When adding or removing any files in this folder, don't forget to update toc.yml accordingly!"
  }
}