{
  "api/OmiyaGames.BidirectionalDictionary-2.html": {
    "href": "api/OmiyaGames.BidirectionalDictionary-2.html",
    "title": "Class BidirectionalDictionary<KEY, VALUE> | Common documentation",
    "keywords": "Class BidirectionalDictionary<KEY, VALUE> A two-direction dictionary where a key maps to a value, and vice versa. This does mean both keys and values must be unique. Inheritance Object BidirectionalDictionary<KEY, VALUE> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class BidirectionalDictionary<KEY, VALUE> : IDictionary<KEY, VALUE>, ICollection<KeyValuePair<KEY, VALUE>>, IEnumerable<KeyValuePair<KEY, VALUE>>, IEnumerable Type Parameters Name Description KEY VALUE Remarks Revision History: DateNameDescription 4/4/2020TaroInitial version Constructors BidirectionalDictionary() Declaration public BidirectionalDictionary() BidirectionalDictionary(BidirectionalDictionary<KEY, VALUE>) Declaration public BidirectionalDictionary(BidirectionalDictionary<KEY, VALUE> dictionaryToClone) Parameters Type Name Description BidirectionalDictionary <KEY, VALUE> dictionaryToClone BidirectionalDictionary(Dictionary<KEY, VALUE>) Declaration public BidirectionalDictionary(Dictionary<KEY, VALUE> dictionary) Parameters Type Name Description Dictionary <KEY, VALUE> dictionary BidirectionalDictionary(IDictionary<KEY, VALUE>, IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Declaration public BidirectionalDictionary(IDictionary<KEY, VALUE> dictionary, IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description IDictionary <KEY, VALUE> dictionary IEqualityComparer <KEY> keyComparer IEqualityComparer <VALUE> valueComparer BidirectionalDictionary(IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Declaration public BidirectionalDictionary(IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description IEqualityComparer <KEY> keyComparer IEqualityComparer <VALUE> valueComparer BidirectionalDictionary(Int32) Declaration public BidirectionalDictionary(int capacity) Parameters Type Name Description Int32 capacity BidirectionalDictionary(Int32, IEqualityComparer<KEY>, IEqualityComparer<VALUE>) Declaration public BidirectionalDictionary(int capacity, IEqualityComparer<KEY> keyComparer, IEqualityComparer<VALUE> valueComparer) Parameters Type Name Description Int32 capacity IEqualityComparer <KEY> keyComparer IEqualityComparer <VALUE> valueComparer Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Always false. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[KEY] Same as GetValue(KEY) and SetKey(VALUE, KEY) : gets and sets a corresponding value. Declaration public VALUE this[KEY key] { get; set; } Parameters Type Name Description KEY key Property Value Type Description VALUE KeyComparer The comparer used to check whether two keys equal each other. Declaration public IEqualityComparer<KEY> KeyComparer { get; } Property Value Type Description IEqualityComparer <KEY> Keys Declaration public ICollection<KEY> Keys { get; } Property Value Type Description ICollection <KEY> ValueComparer The comparer used to check whether two values equal each other. Declaration public IEqualityComparer<VALUE> ValueComparer { get; } Property Value Type Description IEqualityComparer <VALUE> Values Declaration public ICollection<VALUE> Values { get; } Property Value Type Description ICollection <VALUE> Methods Add(KEY, VALUE) Adds a new key and value combo, if and only if the key and the values are both unique. Declaration public void Add(KEY key, VALUE value) Parameters Type Name Description KEY key VALUE value Add(KeyValuePair<KEY, VALUE>) Declaration public void Add(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Clear() Declaration public void Clear() Contains(KeyValuePair<KEY, VALUE>) Checks if this dictionary contains the key-to-value pairing. Declaration public bool Contains(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Pairing to verify whether this dictionary contains or not. Returns Type Description Boolean True, if and only if this dictionary contains the same pairing as item . ContainsKey(KEY) Declaration public bool ContainsKey(KEY key) Parameters Type Name Description KEY key Returns Type Description Boolean ContainsValue(VALUE) Declaration public bool ContainsValue(VALUE value) Parameters Type Name Description VALUE value Returns Type Description Boolean CopyTo(KeyValuePair<KEY, VALUE>[], Int32) Declaration public void CopyTo(KeyValuePair<KEY, VALUE>[] array, int arrayIndex) Parameters Type Name Description KeyValuePair <KEY, VALUE>[] array Int32 arrayIndex GetEnumerator() Declaration public IEnumerator<KeyValuePair<KEY, VALUE>> GetEnumerator() Returns Type Description IEnumerator < KeyValuePair <KEY, VALUE>> GetKey(VALUE) Gets a corresponding key that's paired with a value. Declaration public KEY GetKey(VALUE value) Parameters Type Name Description VALUE value Returns Type Description KEY GetValue(KEY) Gets a corresponding value that's paired with a key. Declaration public VALUE GetValue(KEY key) Parameters Type Name Description KEY key Returns Type Description VALUE Remove(KEY) Same as RemoveKey(KEY) : removes a key and its corresponding value from the dictionary. Declaration public bool Remove(KEY key) Parameters Type Name Description KEY key Returns Type Description Boolean See Also RemoveKey(KEY) Remove(KeyValuePair<KEY, VALUE>) Removes a key-value pair if and only if there's a corresponding key-value map. Declaration public bool Remove(KeyValuePair<KEY, VALUE> item) Parameters Type Name Description KeyValuePair <KEY, VALUE> item Pairing to remove. Returns Type Description Boolean True if successfully removed; false, otherwise. See Also Contains(KeyValuePair<KEY, VALUE>) RemoveKey(KEY) Declaration public bool RemoveKey(KEY key) Parameters Type Name Description KEY key Returns Type Description Boolean RemoveValue(VALUE) Declaration public bool RemoveValue(VALUE value) Parameters Type Name Description VALUE value Returns Type Description Boolean SetKey(VALUE, KEY) Checks if a value exists, and if so, returns the corresponding key. Declaration public void SetKey(VALUE value, KEY newKey) Parameters Type Name Description VALUE value KEY newKey SetValue(KEY, VALUE) Checks if a key exists, and the newValue doesn't; if so, replaces the key's pairing to newValue. Declaration public void SetValue(KEY key, VALUE newValue) Parameters Type Name Description KEY key VALUE newValue Exceptions Type Condition KeyNotFoundException Thrown if the KEY isn't a valid key in the dictionary. TryGetKey(VALUE, out KEY) Checks if a value exists, and if so, returns the corresponding key. Declaration public bool TryGetKey(VALUE value, out KEY key) Parameters Type Name Description VALUE value KEY key Returns Type Description Boolean TryGetValue(KEY, out VALUE) Checks if a key exists, and if so, returns the corresponding value. Declaration public bool TryGetValue(KEY key, out VALUE value) Parameters Type Name Description KEY key VALUE value Returns Type Description Boolean"
  },
  "api/OmiyaGames.Common.Editor.AssetHelpers.html": {
    "href": "api/OmiyaGames.Common.Editor.AssetHelpers.html",
    "title": "Class AssetHelpers | Common documentation",
    "keywords": "Class AssetHelpers A series of utilities used throughout the OmiyaGames namespace. Inheritance Object AssetHelpers Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public static class AssetHelpers Remarks Revision History: DateNameDescription 8/18/2015TaroInitial version 3/25/2020TaroConverted the class to a package Fields ConfirmationDialogTitle Declaration public const string ConfirmationDialogTitle = \"Overwrite File?\" Field Value Type Description String CreateScriptableObjectAtFolder Declaration public const string CreateScriptableObjectAtFolder = \"Assets/\" Field Value Type Description String ManifestFileExtension Declaration public const string ManifestFileExtension = \".manifest\" Field Value Type Description String Methods ConfirmFileIsWriteable(String, String, Boolean) Declaration public static bool ConfirmFileIsWriteable(string pathOfAsset, string nameOfFile, bool showWindow = true) Parameters Type Name Description String pathOfAsset String nameOfFile Boolean showWindow Returns Type Description Boolean CreateFolderRecursively(String) Declaration public static string CreateFolderRecursively(string newFolderPath) Parameters Type Name Description String newFolderPath Returns Type Description String GetLastFolderName(String, Boolean) Declaration public static string GetLastFolderName(string path, bool pathIncludesFileName) Parameters Type Name Description String path Boolean pathIncludesFileName Returns Type Description String GetSelectedFolder() Declaration public static string GetSelectedFolder() Returns Type Description String SaveAsAssetBundle(ScriptableObject, String, String, String, StringBuilder, Boolean, Boolean) Declaration public static string SaveAsAssetBundle(ScriptableObject newAsset, string newFolderName, string newFileName, string bundleId, StringBuilder builder, bool relativeToProject, bool overwritePreviousFile = false) Parameters Type Name Description ScriptableObject newAsset String newFolderName String newFileName String bundleId StringBuilder builder Boolean relativeToProject Boolean overwritePreviousFile Returns Type Description String"
  },
  "api/OmiyaGames.Common.Editor.DefaultNumberDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultNumberDrawer.html",
    "title": "Class DefaultNumberDrawer | Common documentation",
    "keywords": "Class DefaultNumberDrawer Inheritance Object IDefaultDrawer DefaultNumberDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultNumberDrawer : IDefaultDrawer Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.DefaultObjectDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultObjectDrawer.html",
    "title": "Class DefaultObjectDrawer | Common documentation",
    "keywords": "Class DefaultObjectDrawer Editor for DefaultObjectAttribute . Inheritance Object IDefaultDrawer DefaultObjectDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultObjectDrawer : IDefaultDrawer Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label See Also DefaultObjectAttribute"
  },
  "api/OmiyaGames.Common.Editor.DefaultRangeDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.DefaultRangeDrawer.html",
    "title": "Class DefaultRangeDrawer | Common documentation",
    "keywords": "Class DefaultRangeDrawer Editor for DefaultRangeAttribute . Inheritance Object IDefaultDrawer DefaultRangeDrawer Inherited Members IDefaultDrawer.DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, Boolean, VALUE) IDefaultDrawer.SetupPositioning(SerializedProperty, Rect, Rect, Rect) Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class DefaultRangeDrawer : IDefaultDrawer Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label See Also DefaultRangeAttribute"
  },
  "api/OmiyaGames.Common.Editor.EditorHelpers.html": {
    "href": "api/OmiyaGames.Common.Editor.EditorHelpers.html",
    "title": "Class EditorHelpers | Common documentation",
    "keywords": "Class EditorHelpers A series of utilities used throughout the OmiyaGames namespace. Inheritance Object EditorHelpers Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public static class EditorHelpers Remarks Revision History: DateNameDescription 9/20/2018TaroInitial version 3/25/2020TaroConverted the class to a package Fields IndentSpace Declaration public const float IndentSpace = 14F Field Value Type Description Single MinHelpBoxHeight Declaration public const float MinHelpBoxHeight = 30F Field Value Type Description Single VerticalMargin Declaration public const float VerticalMargin = 2F Field Value Type Description Single VerticalSpace Declaration public const float VerticalSpace = 8F Field Value Type Description Single Methods CreateBool(UnityEditor.Editor, ref AnimBool) Declaration public static void CreateBool(UnityEditor.Editor editor, ref AnimBool boolAnimation) Parameters Type Name Description UnityEditor.Editor editor AnimBool boolAnimation DestroyBool(UnityEditor.Editor, ref AnimBool) Declaration public static void DestroyBool(UnityEditor.Editor editor, ref AnimBool boolAnimation) Parameters Type Name Description UnityEditor.Editor editor AnimBool boolAnimation DrawBoldFoldout(AnimBool, String) Declaration public static void DrawBoldFoldout(AnimBool buildSettingsAnimation, string displayLabel) Parameters Type Name Description AnimBool buildSettingsAnimation String displayLabel DrawEnum<ENUM>(SerializedProperty, ENUM[]) Helper method to draw enums from a limited range. Declaration public static void DrawEnum<ENUM>(SerializedProperty property, params ENUM[] supportedEnums) where ENUM : Enum Parameters Type Name Description SerializedProperty property ENUM[] supportedEnums List of supported enums. The first element is treated as default. Type Parameters Name Description ENUM DrawEnum<ENUM>(SerializedProperty, ENUM[], ENUM) Helper method to draw enums from a limited range. Declaration public static void DrawEnum<ENUM>(SerializedProperty property, ENUM[] supportedEnums, ENUM defaultEnum) where ENUM : Enum Parameters Type Name Description SerializedProperty property ENUM[] supportedEnums List of supported enums. The first element is treated as default. ENUM defaultEnum Type Parameters Name Description ENUM DrawEnum<ENUM>(SerializedProperty, ENUM[], ENUM, ENUM, String) Helper method to draw enums from a limited range. Draws a warning if the target has an enum that doesn't match the property Declaration public static void DrawEnum<ENUM>(SerializedProperty property, ENUM[] supportedEnums, ENUM defaultEnum, ENUM targetsEnum, string message = \"\\\"{0}\\\" is not supported; \\\"{1}\\\" will be used instead.\") where ENUM : Enum Parameters Type Name Description SerializedProperty property ENUM[] supportedEnums ENUM defaultEnum ENUM targetsEnum String message Type Parameters Name Description ENUM GetHeight(GUIContent, Int32, Single) Declaration public static float GetHeight(GUIContent label, int numRows, float verticalMargin = 2F) Parameters Type Name Description GUIContent label Int32 numRows Single verticalMargin Returns Type Description Single GetHeight(Int32, Single) Declaration public static float GetHeight(int numRows, float verticalMargin = 2F) Parameters Type Name Description Int32 numRows Single verticalMargin Returns Type Description Single GetHelpBoxHeight(String, Single, Single) Declaration public static float GetHelpBoxHeight(string text, float viewWidth, float minHeight = 30F) Parameters Type Name Description String text Single viewWidth Single minHeight Returns Type Description Single SingleLineHeight(Single) Declaration public static float SingleLineHeight(float verticalMargin) Parameters Type Name Description Single verticalMargin Returns Type Description Single"
  },
  "api/OmiyaGames.Common.Editor.EnumFlagsDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.EnumFlagsDrawer.html",
    "title": "Class EnumFlagsDrawer | Common documentation",
    "keywords": "Class EnumFlagsDrawer Makes an enum multi-selectable in the Unity editor with [EnumFlags] . Inheritance Object EnumFlagsDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class EnumFlagsDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods DisplayEnumFlags(Rect, SerializedProperty, GUIContent) Declaration public static int DisplayEnumFlags(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label Returns Type Description Int32 DisplayEnumFlags(Rect, SerializedProperty, GUIContent, String[]) Declaration public static int DisplayEnumFlags(Rect position, SerializedProperty property, GUIContent label, string[] enumNames) Parameters Type Name Description Rect position SerializedProperty property GUIContent label String [] enumNames Returns Type Description Int32 OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.FilePathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.FilePathDrawer.html",
    "title": "Class FilePathDrawer | Common documentation",
    "keywords": "Class FilePathDrawer Editor for FilePathAttribute . Inheritance Object FolderPathDrawer FilePathDrawer Inherited Members FolderPathDrawer.GetLocalPath(String, FolderPathAttribute.RelativeTo) FolderPathDrawer.GetPropertyHeight(SerializedProperty, GUIContent) FolderPathDrawer.OnGUI(Rect, SerializedProperty, GUIContent) FolderPathDrawer.WrongPathMessage Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class FilePathDrawer : FolderPathDrawer Remarks Revision History: DateNameDescription 11/01/2018TaroInitial version 3/25/2020TaroConverted the class to a package Properties IsValid Declaration protected override bool IsValid { get; } Property Value Type Description Boolean Overrides FolderPathDrawer.IsValid WrongAttributeMessage Declaration public override string WrongAttributeMessage { get; } Property Value Type Description String Overrides FolderPathDrawer.WrongAttributeMessage Methods IsMessageBoxShown(SerializedProperty, FolderPathAttribute) Declaration public override bool IsMessageBoxShown(SerializedProperty property, FolderPathAttribute attribute) Parameters Type Name Description SerializedProperty property FolderPathAttribute attribute Returns Type Description Boolean Overrides FolderPathDrawer.IsMessageBoxShown(SerializedProperty, FolderPathAttribute) OpenDialog(SerializedProperty, GUIContent) Declaration protected override void OpenDialog(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Overrides FolderPathDrawer.OpenDialog(SerializedProperty, GUIContent) See Also FilePathAttribute"
  },
  "api/OmiyaGames.Common.Editor.FolderPathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.FolderPathDrawer.html",
    "title": "Class FolderPathDrawer | Common documentation",
    "keywords": "Class FolderPathDrawer Editor for FolderPathAttribute . Inheritance Object FolderPathDrawer FilePathDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class FolderPathDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 11/01/2018TaroInitial version 3/25/2020TaroConverted the class to a package Properties IsValid Declaration protected virtual bool IsValid { get; } Property Value Type Description Boolean WrongAttributeMessage Declaration public virtual string WrongAttributeMessage { get; } Property Value Type Description String WrongPathMessage Declaration public string WrongPathMessage { get; } Property Value Type Description String Methods GetLocalPath(String, FolderPathAttribute.RelativeTo) Declaration public static string GetLocalPath(string fullPath, FolderPathAttribute.RelativeTo relativeTo) Parameters Type Name Description String fullPath FolderPathAttribute.RelativeTo relativeTo Returns Type Description String GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single IsMessageBoxShown(SerializedProperty, FolderPathAttribute) Declaration public virtual bool IsMessageBoxShown(SerializedProperty property, FolderPathAttribute attribute) Parameters Type Name Description SerializedProperty property FolderPathAttribute attribute Returns Type Description Boolean OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label OpenDialog(SerializedProperty, GUIContent) Declaration protected virtual void OpenDialog(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label See Also FolderPathAttribute"
  },
  "api/OmiyaGames.Common.Editor.HsvColorDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.HsvColorDrawer.html",
    "title": "Class HsvColorDrawer | Common documentation",
    "keywords": "Class HsvColorDrawer Property Drawer for HSV Color by...just making it into a color picker. Inheritance Object HsvColorDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class HsvColorDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 10/12/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label See Also HsvColor"
  },
  "api/OmiyaGames.Common.Editor.html": {
    "href": "api/OmiyaGames.Common.Editor.html",
    "title": "Namespace OmiyaGames.Common.Editor | Common documentation",
    "keywords": "Namespace OmiyaGames.Common.Editor Classes AssetHelpers A series of utilities used throughout the OmiyaGames namespace. DefaultNumberDrawer DefaultObjectDrawer Editor for DefaultObjectAttribute . DefaultRangeDrawer Editor for DefaultRangeAttribute . EditorHelpers A series of utilities used throughout the OmiyaGames namespace. EnumFlagsDrawer Makes an enum multi-selectable in the Unity editor with [EnumFlags] . FilePathDrawer Editor for FilePathAttribute . FolderPathDrawer Editor for FolderPathAttribute . HsvColorDrawer Property Drawer for HSV Color by...just making it into a color picker. IDefaultDrawer Helper class that unifies common methods in a few drawers. ReadOnlyDrawer Makes a field read-only in the Unity editor with [ReadOnly] . ScenePathDrawer Editor for ScenePathAttribute . SupportedPlatformsDrawer Property drawer for SupportedPlatforms . Delegates IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> IDefaultDrawer.SetToDefault<ATTRIBUTE>"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.DisplayControl-2.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.DisplayControl-2.html",
    "title": "Delegate IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> | Common documentation",
    "keywords": "Delegate IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax protected delegate void DisplayControl<ATTRIBUTE, VALUE>(SerializedProperty property, ATTRIBUTE range, Rect position, ref VALUE value) where ATTRIBUTE : PropertyAttribute; Parameters Type Name Description SerializedProperty property ATTRIBUTE range Rect position VALUE value Type Parameters Name Description ATTRIBUTE VALUE"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.html",
    "title": "Class IDefaultDrawer | Common documentation",
    "keywords": "Class IDefaultDrawer Helper class that unifies common methods in a few drawers. Inheritance Object IDefaultDrawer DefaultNumberDrawer DefaultObjectDrawer DefaultRangeDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public abstract class IDefaultDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty, ATTRIBUTE, Rect, IDefaultDrawer.SetToDefault<ATTRIBUTE>, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE>, ref Boolean, ref VALUE) Taken from https://bitbucket.org/Unity-Technologies/ui/src/2017.3/UnityEditor.UI/UI/LayoutElementEditor.cs Declaration protected static void DisplayCheckboxAndControl<ATTRIBUTE, VALUE>(SerializedProperty property, ATTRIBUTE range, Rect position, IDefaultDrawer.SetToDefault<ATTRIBUTE> setToDefault, IDefaultDrawer.DisplayControl<ATTRIBUTE, VALUE> slider, ref bool show, ref VALUE value) where ATTRIBUTE : PropertyAttribute Parameters Type Name Description SerializedProperty property ATTRIBUTE range Rect position IDefaultDrawer.SetToDefault <ATTRIBUTE> setToDefault IDefaultDrawer.DisplayControl <ATTRIBUTE, VALUE> slider Boolean show VALUE value Type Parameters Name Description ATTRIBUTE VALUE SetupPositioning(SerializedProperty, Rect, out Rect, out Rect) Taken from https://bitbucket.org/Unity-Technologies/ui/src/2017.3/UnityEditor.UI/UI/LayoutElementEditor.cs Declaration protected static void SetupPositioning(SerializedProperty property, Rect position, out Rect toggleRect, out Rect fieldRect) Parameters Type Name Description SerializedProperty property Rect position Rect toggleRect Rect fieldRect See Also DefaultRangeDrawer DefaultObjectDrawer DefaultNumberDrawer"
  },
  "api/OmiyaGames.Common.Editor.IDefaultDrawer.SetToDefault-1.html": {
    "href": "api/OmiyaGames.Common.Editor.IDefaultDrawer.SetToDefault-1.html",
    "title": "Delegate IDefaultDrawer.SetToDefault<ATTRIBUTE> | Common documentation",
    "keywords": "Delegate IDefaultDrawer.SetToDefault<ATTRIBUTE> Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax protected delegate void SetToDefault<ATTRIBUTE>(SerializedProperty property, ATTRIBUTE range) where ATTRIBUTE : PropertyAttribute; Parameters Type Name Description SerializedProperty property ATTRIBUTE range Type Parameters Name Description ATTRIBUTE"
  },
  "api/OmiyaGames.Common.Editor.ReadOnlyDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | Common documentation",
    "keywords": "Class ReadOnlyDrawer Makes a field read-only in the Unity editor with [ReadOnly] . Inheritance Object ReadOnlyDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class ReadOnlyDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 10/1/2014It3rationInitial version 3/25/2020Taro OmiyaConverted the class to a package Methods GetPropertyHeight(SerializedProperty, GUIContent) Declaration public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters Type Name Description SerializedProperty property GUIContent label Returns Type Description Single OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label"
  },
  "api/OmiyaGames.Common.Editor.ScenePathDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.ScenePathDrawer.html",
    "title": "Class ScenePathDrawer | Common documentation",
    "keywords": "Class ScenePathDrawer Editor for ScenePathAttribute . Inheritance Object ScenePathDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class ScenePathDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 11/01/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods DrawSceneAssetField(Rect, SerializedProperty, GUIContent) Declaration public static void DrawSceneAssetField(Rect position, SerializedProperty property, GUIContent label = null) Parameters Type Name Description Rect position SerializedProperty property GUIContent label OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label See Also ScenePathAttribute"
  },
  "api/OmiyaGames.Common.Editor.SupportedPlatformsDrawer.html": {
    "href": "api/OmiyaGames.Common.Editor.SupportedPlatformsDrawer.html",
    "title": "Class SupportedPlatformsDrawer | Common documentation",
    "keywords": "Class SupportedPlatformsDrawer Property drawer for SupportedPlatforms . Inheritance Object SupportedPlatformsDrawer Namespace : OmiyaGames.Common.Editor Assembly : cs.temp.dll.dll Syntax public class SupportedPlatformsDrawer : PropertyDrawer Remarks Revision History: DateNameDescription 6/12/2018TaroInitial version 3/25/2020TaroConverted the class to a package Methods OnGUI(Rect, SerializedProperty, GUIContent) Declaration public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters Type Name Description Rect position SerializedProperty property GUIContent label See Also SupportedPlatforms"
  },
  "api/OmiyaGames.DefaultNumberAttribute.html": {
    "href": "api/OmiyaGames.DefaultNumberAttribute.html",
    "title": "Class DefaultNumberAttribute | Common documentation",
    "keywords": "Class DefaultNumberAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. Inheritance Object DefaultNumberAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultNumberAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors DefaultNumberAttribute(Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the Declaration public DefaultNumberAttribute(float defaultNumber) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. DefaultNumberAttribute(Single, Boolean, Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the Declaration public DefaultNumberAttribute(float defaultNumber, bool greaterThan, float startNumber) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. Boolean greaterThan Indicates whether the editor number is limited to being greater or less. Single startNumber If greaterThan is true, the number in the editor must be greater than this parameter. If false, then the number in the editor must be less. Properties DefaultNumber The number set to the value if editor's checkbox is unchecked. Declaration public float DefaultNumber { get; } Property Value Type Description Single NumberRange Indicates whether the editor number is limited to being greater, less, or neither. Declaration public DefaultNumberAttribute.Range NumberRange { get; } Property Value Type Description DefaultNumberAttribute.Range StartNumber If numberRange is Range.GreaterThanOrEqualTo , the number in the editor must be greater than this parameter. If Range.LessThanOrEqualTo , then the number in the editor must be less. Otherwise, this value is the first value the editor is set to when it's checked. Declaration public float StartNumber { get; } Property Value Type Description Single"
  },
  "api/OmiyaGames.DefaultNumberAttribute.Range.html": {
    "href": "api/OmiyaGames.DefaultNumberAttribute.Range.html",
    "title": "Enum DefaultNumberAttribute.Range | Common documentation",
    "keywords": "Enum DefaultNumberAttribute.Range Indicates whether the editor number is limited to being greater, less, or neither. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public enum Range Fields Name Description FullRange GreaterThanOrEqualTo LessThanOrEqualTo"
  },
  "api/OmiyaGames.DefaultObjectAttribute.html": {
    "href": "api/OmiyaGames.DefaultObjectAttribute.html",
    "title": "Class DefaultObjectAttribute | Common documentation",
    "keywords": "Class DefaultObjectAttribute Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. Inheritance Object DefaultObjectAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultObjectAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors DefaultObjectAttribute() Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. Declaration public DefaultObjectAttribute()"
  },
  "api/OmiyaGames.DefaultRangeAttribute.html": {
    "href": "api/OmiyaGames.DefaultRangeAttribute.html",
    "title": "Class DefaultRangeAttribute | Common documentation",
    "keywords": "Class DefaultRangeAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a slider, allowing the user to change this value. Inheritance Object DefaultRangeAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class DefaultRangeAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors DefaultRangeAttribute(Int32, Int32, Int32) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the value to a specified range between min and max (both inclusive). Declaration public DefaultRangeAttribute(int defaultNumber, int min, int max) Parameters Type Name Description Int32 defaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Int32 min Minimum value in the editor's slider. Int32 max Maximum value in the editor's slider. DefaultRangeAttribute(Single, Single, Single) Creates a checkbox in the editor. If unchecked, argument is set to first argument. Otherwise, the user is allowed to set the value to a specified range between min and max (both inclusive). Declaration public DefaultRangeAttribute(float defaultNumber, float min, float max) Parameters Type Name Description Single defaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Single min Minimum value in the editor's slider. Single max Maximum value in the editor's slider. Properties DefaultNumber The number set to the value if editor's checkbox is unchecked. Best to set to a value that's NOT within the range of min and max . Declaration public float DefaultNumber { get; } Property Value Type Description Single Max Maximum value in the editor's slider. Declaration public float Max { get; } Property Value Type Description Single Min Minimum value in the editor's slider. Declaration public float Min { get; } Property Value Type Description Single"
  },
  "api/OmiyaGames.EnumFlagsAttribute.html": {
    "href": "api/OmiyaGames.EnumFlagsAttribute.html",
    "title": "Class EnumFlagsAttribute | Common documentation",
    "keywords": "Class EnumFlagsAttribute Makes an enum multi-selectable in the Unity editor with [EnumFlags] . Inheritance Object EnumFlagsAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class EnumFlagsAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 11/20/2017AqibsadiqInitial version 3/25/2020Taro OmiyaConverted the class to a package"
  },
  "api/OmiyaGames.FilePathAttribute.html": {
    "href": "api/OmiyaGames.FilePathAttribute.html",
    "title": "Class FilePathAttribute | Common documentation",
    "keywords": "Class FilePathAttribute Adds a browse button to a string field. Inheritance Object FolderPathAttribute FilePathAttribute Inherited Members FolderPathAttribute.DefaultLocalPath FolderPathAttribute.PathRelativeTo FolderPathAttribute.DefaultPath FolderPathAttribute.IsWarningDisplayed Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class FilePathAttribute : FolderPathAttribute Remarks Revision History: DateNameDescription 11/01/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors FilePathAttribute(String, String, FolderPathAttribute.RelativeTo, Boolean) Adds a browse button to a string field. Declaration public FilePathAttribute(string fileExtensions, string defaultPath = \"Assets\", FolderPathAttribute.RelativeTo relativeTo = FolderPathAttribute.RelativeTo.None, bool displayWarning = true) Parameters Type Name Description String fileExtensions The file extention, without \"*.\" String defaultPath FolderPathAttribute.RelativeTo relativeTo Boolean displayWarning Properties FileExtension Declaration public string FileExtension { get; } Property Value Type Description String"
  },
  "api/OmiyaGames.FolderPathAttribute.html": {
    "href": "api/OmiyaGames.FolderPathAttribute.html",
    "title": "Class FolderPathAttribute | Common documentation",
    "keywords": "Class FolderPathAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. Inheritance Object FolderPathAttribute FilePathAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class FolderPathAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 6/26/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors FolderPathAttribute(String, FolderPathAttribute.RelativeTo, Boolean) Declaration public FolderPathAttribute(string defaultPath = \"Assets\", FolderPathAttribute.RelativeTo relativeTo = FolderPathAttribute.RelativeTo.None, bool displayWarning = true) Parameters Type Name Description String defaultPath FolderPathAttribute.RelativeTo relativeTo Boolean displayWarning Fields DefaultLocalPath Declaration public const string DefaultLocalPath = \"Assets\" Field Value Type Description String Properties DefaultPath Declaration public string DefaultPath { get; } Property Value Type Description String IsWarningDisplayed Declaration public bool IsWarningDisplayed { get; } Property Value Type Description Boolean PathRelativeTo Declaration public FolderPathAttribute.RelativeTo PathRelativeTo { get; } Property Value Type Description FolderPathAttribute.RelativeTo"
  },
  "api/OmiyaGames.FolderPathAttribute.RelativeTo.html": {
    "href": "api/OmiyaGames.FolderPathAttribute.RelativeTo.html",
    "title": "Enum FolderPathAttribute.RelativeTo | Common documentation",
    "keywords": "Enum FolderPathAttribute.RelativeTo Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public enum RelativeTo Fields Name Description None ProjectDirectory"
  },
  "api/OmiyaGames.Helpers.html": {
    "href": "api/OmiyaGames.Helpers.html",
    "title": "Class Helpers | Common documentation",
    "keywords": "Class Helpers A series of utilities used throughout the OmiyaGames namespace. Inheritance Object Helpers Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public static class Helpers Remarks Revision History: DateNameDescription 8/18/2015TaroInitial version 6/4/2018TaroAdded method for shortening URL 3/25/2020TaroConverted the class to a package Fields FileExtensionScriptableObject Declaration public const string FileExtensionScriptableObject = \".asset\" Field Value Type Description String FileExtensionText Declaration public const string FileExtensionText = \".txt\" Field Value Type Description String IsTimeStampPrintedByDefault Declaration public const bool IsTimeStampPrintedByDefault = true Field Value Type Description Boolean PathDivider Declaration public const char PathDivider = '/' Field Value Type Description Char SnapToThreshold Declaration public const float SnapToThreshold = 0.01F Field Value Type Description Single stripStartOfUrl Declaration public static readonly string[] stripStartOfUrl Field Value Type Description String [] TimeStampPrint Declaration public const string TimeStampPrint = \"HH:mm:ss.ffff GMTzz\" Field Value Type Description String Methods ConvertToEnum<ENUM>(Int32) Declaration public static ENUM ConvertToEnum<ENUM>(int value) where ENUM : Enum Parameters Type Name Description Int32 value Returns Type Description ENUM Type Parameters Name Description ENUM ConvertToInt<ENUM>(ENUM) Declaration public static int ConvertToInt<ENUM>(ENUM value) where ENUM : Enum Parameters Type Name Description ENUM value Returns Type Description Int32 Type Parameters Name Description ENUM DecrementVector(ref Vector2, ref Vector2) A slightly more efficient way of decrementing a Vector3 than assignment. Declaration public static void DecrementVector(ref Vector2 toSet, ref Vector2 subtract) Parameters Type Name Description Vector2 toSet Vector2 subtract DecrementVector(ref Vector3, ref Vector3) A slightly more efficient way of decrementing a Vector3 than assignment. Declaration public static void DecrementVector(ref Vector3 toSet, ref Vector3 subtract) Parameters Type Name Description Vector3 toSet Vector3 subtract GetComponentCached<T>(MonoBehaviour, ref T) Grabs a component, and sets it to cache, unless the cache isn't null. Declaration public static T GetComponentCached<T>(MonoBehaviour script, ref T cache) where T : Component Parameters Type Name Description MonoBehaviour script T cache Returns Type Description T Type Parameters Name Description T GetParentCanvas(Transform) Declaration public static Canvas GetParentCanvas(Transform checkTransform) Parameters Type Name Description Transform checkTransform Returns Type Description Canvas IncrementVector(ref Vector2, ref Vector2) A slightly more efficient way of incrementing a Vector3 than assignment. Declaration public static void IncrementVector(ref Vector2 toSet, ref Vector2 add) Parameters Type Name Description Vector2 toSet Vector2 add IncrementVector(ref Vector3, ref Vector3) A slightly more efficient way of incrementing a Vector3 than assignment. Declaration public static void IncrementVector(ref Vector3 toSet, ref Vector3 add) Parameters Type Name Description Vector3 toSet Vector3 add Log(String, Boolean) Declaration public static void Log(string message, bool showTimestamp = true) Parameters Type Name Description String message Boolean showTimestamp RemoveDuplicateEntries<H>(List<H>, IEqualityComparer<H>) Declaration public static void RemoveDuplicateEntries<H>(List<H> list, IEqualityComparer<H> comparer = null) Parameters Type Name Description List <H> list IEqualityComparer <H> comparer Type Parameters Name Description H Replicate(GameObject, Boolean) Creates a clone of the provided GameObject and places it under the same parent on the hierarchy. Declaration public static GameObject Replicate(GameObject copyFrom, bool setActive = true) Parameters Type Name Description GameObject copyFrom The GameObject to clone off of. Boolean setActive Whether the clone is active or not Returns Type Description GameObject A clone of GameObject Replicate(GameObject, Transform, Boolean, Boolean, Boolean, Boolean) Creates a clone of the provided GameObject and places it under the assigned transform on the hierarchy. Declaration public static GameObject Replicate(GameObject copyFrom, Transform attachTo, bool setActive = true, bool copyLocalPosition = true, bool copyLocalRotation = true, bool copyLocalScale = true) Parameters Type Name Description GameObject copyFrom The GameObject to clone off of. Transform attachTo The Transform to make the clone a child of. null will place the clone at the hierarchy's root. Boolean setActive Whether the clone is active or not Boolean copyLocalPosition Whether the clone will be at the same position as the original or not Boolean copyLocalRotation Whether the clone will have the same rotation as the original or not Boolean copyLocalScale Whether the clone will be scaled the same as the original or not Returns Type Description GameObject A clone of GameObject Replicate<T>(T, Boolean) Creates a clone of the components GameObject , places it under the same parent on the hierarchy, and finally returns the copy of a component attached to that clone. Declaration public static T Replicate<T>(T copyFrom, bool setActive = true) where T : Component Parameters Type Name Description T copyFrom The component to grab its GameObject . This will be used to clone a new GameObject . Boolean setActive Whether the clone is active or not Returns Type Description T A component attached to the new clone Type Parameters Name Description T Component attached to a GameObject Replicate<T>(T, Transform, Boolean, Boolean, Boolean, Boolean) Declaration public static T Replicate<T>(T copyFrom, Transform attachTo, bool setActive = true, bool copyLocalPosition = true, bool copyLocalRotation = true, bool copyLocalScale = true) where T : Component Parameters Type Name Description T copyFrom Transform attachTo Boolean setActive Boolean copyLocalPosition Boolean copyLocalRotation Boolean copyLocalScale Returns Type Description T Type Parameters Name Description T SetVector(ref Vector2, ref Vector2) A slightly more efficient way of setting a Vector3 than assignment. Declaration public static void SetVector(ref Vector2 toSet, ref Vector2 copy) Parameters Type Name Description Vector2 toSet Vector2 copy SetVector(ref Vector3, ref Vector3) A slightly more efficient way of setting a Vector3 than assignment. Declaration public static void SetVector(ref Vector3 toSet, ref Vector3 toCopy) Parameters Type Name Description Vector3 toSet Vector3 toCopy ShortenUrl(String) Declaration public static string ShortenUrl(string url) Parameters Type Name Description String url Returns Type Description String ShuffleList<H>(IList<H>, Int32) Shuffles the list. Declaration public static void ShuffleList<H>(IList<H> list, int upTo = -1) Parameters Type Name Description IList <H> list The list to shuffle. Int32 upTo Number of elements to shuffle, starting at index 0. Elements outside of this range maybe be shuffled between this range as well. If negative, will shuffle all list elements. Type Parameters Name Description H The list type parameter."
  },
  "api/OmiyaGames.HsvColor.html": {
    "href": "api/OmiyaGames.HsvColor.html",
    "title": "Struct HsvColor | Common documentation",
    "keywords": "Struct HsvColor Displays the frame-rate in the upper-left hand corner of the screen. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public struct HsvColor Remarks Revision History: DateNameDescription 9/3/2015Jonathan CzeckWiki version 3/25/2020Taro OmiyaConverted the class to a package. Using Unity's own helper functions. Constructors HsvColor(Color) Declaration public HsvColor(Color col) Parameters Type Name Description Color col HsvColor(HsvColor) Declaration public HsvColor(HsvColor col) Parameters Type Name Description HsvColor col HsvColor(Single, Single, Single, Single) Declaration public HsvColor(float h, float s, float v, float a = 1F) Parameters Type Name Description Single h Single s Single v Single a Properties Alpha Declaration public float Alpha { get; set; } Property Value Type Description Single Hue Declaration public float Hue { get; set; } Property Value Type Description Single Saturation Declaration public float Saturation { get; set; } Property Value Type Description Single Value Declaration public float Value { get; set; } Property Value Type Description Single Methods FromColor(Color) Declaration public static HsvColor FromColor(Color color) Parameters Type Name Description Color color Returns Type Description HsvColor Lerp(HsvColor, HsvColor, Single) Declaration public static HsvColor Lerp(HsvColor a, HsvColor b, float t) Parameters Type Name Description HsvColor a HsvColor b Single t Returns Type Description HsvColor ToColor() Declaration public Color ToColor() Returns Type Description Color ToColor(HsvColor, Boolean) Declaration public static Color ToColor(HsvColor color, bool isHdr = false) Parameters Type Name Description HsvColor color Boolean isHdr Returns Type Description Color ToString() Declaration public override string ToString() Returns Type Description String Overrides ValueType.ToString()"
  },
  "api/OmiyaGames.html": {
    "href": "api/OmiyaGames.html",
    "title": "Namespace OmiyaGames | Common documentation",
    "keywords": "Namespace OmiyaGames Classes BidirectionalDictionary<KEY, VALUE> A two-direction dictionary where a key maps to a value, and vice versa. This does mean both keys and values must be unique. DefaultNumberAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. DefaultObjectAttribute Creates a checkbox in the editor. If unchecked, this value is set to null. If checked, reveals an object field, allowing the user to change this value. DefaultRangeAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a slider, allowing the user to change this value. EnumFlagsAttribute Makes an enum multi-selectable in the Unity editor with [EnumFlags] . FilePathAttribute Adds a browse button to a string field. FolderPathAttribute Creates a checkbox in the editor. If unchecked, the default value is set to this value. If checked, reveals a number field, allowing the user to change this value. Helpers A series of utilities used throughout the OmiyaGames namespace. ListSet<T> A list where all the elements are unique (i.e. a set). Note that due to its nature, null cannot be added into this collection. ProgressReport Helper method to report progress reports. Thread-safe. RandomList<T> ReadOnlyAttribute Makes a field read-only in the Unity editor with [ReadOnly] . ScenePathAttribute Makes a string field accept scene assets only. SupportedPlatformsUtility A class full of helper and extended methods for SupportPlatforms . ThreadSafe<T> Creates a thread-safe variable. Only works on primitives. Note: if a thread-safe integer is in plans, use ThreadSafeInt instead. ThreadSafeInt ThreadSafeLong ThreadSafeStringBuilder Structs HsvColor Displays the frame-rate in the upper-left hand corner of the screen. RandomList<T>.ElementFrequency Indicates the frequency an element is going to be added into the index list, The higher the frequency, the more often an element appears. Enums DefaultNumberAttribute.Range Indicates whether the editor number is limited to being greater, less, or neither. FolderPathAttribute.RelativeTo SupportedPlatforms An enum indicating supported platforms. Can be multi-selected in the Unity Editor."
  },
  "api/OmiyaGames.ListSet-1.html": {
    "href": "api/OmiyaGames.ListSet-1.html",
    "title": "Class ListSet<T> | Common documentation",
    "keywords": "Class ListSet<T> A list where all the elements are unique (i.e. a set). Note that due to its nature, null cannot be added into this collection. Inheritance Object ListSet<T> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ListSet<T> : ISet<T>, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Remarks Revision History: DateNameDescription 1/23/2019TaroInitial version 3/25/2020TaroConverted the class to a package Constructors ListSet() Declaration public ListSet() ListSet(IEqualityComparer<T>) Declaration public ListSet(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer ListSet(Int32) Declaration public ListSet(int capacity) Parameters Type Name Description Int32 capacity ListSet(Int32, IEqualityComparer<T>) Declaration public ListSet(int capacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 capacity IEqualityComparer <T> comparer Properties Count Declaration public int Count { get; } Property Value Type Description Int32 IsReadOnly Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean Item[Int32] Gets or sets an element in the list. For the setter, if an element already in the list is inserted, an exception will be thrown. Declaration public T this[int index] { get; set; } Parameters Type Name Description Int32 index Property Value Type Description T Methods Add(T) Declaration public bool Add(T item) Parameters Type Name Description T item Returns Type Description Boolean AsReadOnly() Declaration public ReadOnlyCollection<T> AsReadOnly() Returns Type Description ReadOnlyCollection <T> Clear() Declaration public void Clear() Contains(T) Declaration public bool Contains(T item) Parameters Type Name Description T item Returns Type Description Boolean CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex ExceptWith(IEnumerable<T>) Not implemented! Declaration public void ExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other GetEnumerator() Declaration public IEnumerator<T> GetEnumerator() Returns Type Description IEnumerator <T> IndexOf(T) Gets the index of an item, or -1 if it isn't in the list. Declaration public int IndexOf(T item) Parameters Type Name Description T item The element to search through the list. Returns Type Description Int32 Index of an item, or -1 if it isn't in the list. Insert(Int32, T) Declaration public bool Insert(int index, T item) Parameters Type Name Description Int32 index T item Returns Type Description Boolean IntersectWith(IEnumerable<T>) Not implemented! Declaration public void IntersectWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other IsProperSubsetOf(IEnumerable<T>) Not implemented! Declaration public bool IsProperSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsProperSupersetOf(IEnumerable<T>) Not implemented! Declaration public bool IsProperSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSubsetOf(IEnumerable<T>) Not implemented! Declaration public bool IsSubsetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean IsSupersetOf(IEnumerable<T>) Not implemented! Declaration public bool IsSupersetOf(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean Overlaps(IEnumerable<T>) Not implemented! Declaration public bool Overlaps(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean RemoveAt(Int32) Declaration public void RemoveAt(int index) Parameters Type Name Description Int32 index SetEquals(IEnumerable<T>) Not implemented! Declaration public bool SetEquals(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other Returns Type Description Boolean SymmetricExceptWith(IEnumerable<T>) Not implemented! Declaration public void SymmetricExceptWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other UnionWith(IEnumerable<T>) Not implemented! Declaration public void UnionWith(IEnumerable<T> other) Parameters Type Name Description IEnumerable <T> other See Also List <T> Dictionary <TKey, TValue>"
  },
  "api/OmiyaGames.ProgressReport.html": {
    "href": "api/OmiyaGames.ProgressReport.html",
    "title": "Class ProgressReport | Common documentation",
    "keywords": "Class ProgressReport Helper method to report progress reports. Thread-safe. Inheritance Object ProgressReport Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ProgressReport Remarks Revision History: DateNameDescription 10/2/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors ProgressReport() Declaration public ProgressReport() ProgressReport(Int32) Declaration public ProgressReport(int totalSteps) Parameters Type Name Description Int32 totalSteps Properties CurrentStep Declaration public long CurrentStep { get; set; } Property Value Type Description Int64 ProgressPercent Declaration public float ProgressPercent { get; } Property Value Type Description Single TotalSteps Declaration public long TotalSteps { get; } Property Value Type Description Int64 Methods IncrementCurrentStep() Declaration public void IncrementCurrentStep() Reset() Declaration public void Reset() SetTotalSteps(Int64) Resets current step, then sets the total steps Declaration public void SetTotalSteps(long newTotalSteps) Parameters Type Name Description Int64 newTotalSteps See Also ThreadSafeInt"
  },
  "api/OmiyaGames.RandomList-1.ElementFrequency.html": {
    "href": "api/OmiyaGames.RandomList-1.ElementFrequency.html",
    "title": "Struct RandomList<T>.ElementFrequency | Common documentation",
    "keywords": "Struct RandomList<T>.ElementFrequency Indicates the frequency an element is going to be added into the index list, The higher the frequency, the more often an element appears. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public struct ElementFrequency Constructors ElementFrequency(T, Int32) Declaration public ElementFrequency(T element, int frequency = 1) Parameters Type Name Description T element Int32 frequency Properties Element The element this struct is representing. Declaration public T Element { get; set; } Property Value Type Description T Frequency The number of times this element appears in the shuffled index list. This value is never below 1 Declaration public int Frequency { get; set; } Property Value Type Description Int32 Methods Equals(Object) Checks the type of argument. If it's another RandomList<T>.ElementFrequency , compares both Element and Frequency . If it's T , compares if Element matches with the argument. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to. Returns Type Description Boolean If it's another RandomList<T>.ElementFrequency , returns true if both Element and Frequency matches. If it's T , returns true if Element matches with the argument. Otherwise, false. Overrides ValueType.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides ValueType.GetHashCode()"
  },
  "api/OmiyaGames.RandomList-1.html": {
    "href": "api/OmiyaGames.RandomList-1.html",
    "title": "Class RandomList<T> | Common documentation",
    "keywords": "Class RandomList<T> Inheritance Object RandomList<T> Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Serializable] public class RandomList<T> : ICollection<T>, IEnumerable<T>, IEnumerable Type Parameters Name Description T Constructors RandomList() Creates an empty list. Declaration public RandomList() RandomList(Dictionary<T, Int32>) Copies the elements of a dictionary into a new RandomList<T> . Declaration public RandomList(Dictionary<T, int> frequencyMap) Parameters Type Name Description Dictionary <T, Int32 > frequencyMap Map of elements to copy over into this list. Will also copy over its Comparer . RandomList(IDictionary<T, Int32>, IEqualityComparer<T>) Copies the elements of a dictionary into a new RandomList<T> . Declaration public RandomList(IDictionary<T, int> frequencyMap, IEqualityComparer<T> comparer) Parameters Type Name Description IDictionary <T, Int32 > frequencyMap Map of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IEqualityComparer<T>) Creates an empty list, utilizing a comparer to detect overlap when running Add(T, Int32) and Remove(T, Int32) . Declaration public RandomList(IEqualityComparer<T> comparer) Parameters Type Name Description IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IList<T>) Copies the elements of the list, each with equal frequency of appearance, into a new RandomList<T> . Declaration public RandomList(IList<T> list) Parameters Type Name Description IList <T> list List of elements to copy over into this list. RandomList(IList<T>, IEqualityComparer<T>) Copies the elements of the list, each with equal frequency of appearance, into a new RandomList<T> . Declaration public RandomList(IList<T> list, IEqualityComparer<T> comparer) Parameters Type Name Description IList <T> list List of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(IList<RandomList<T>.ElementFrequency>) Copies the elements of a list into a new RandomList<T> . Declaration public RandomList(IList<RandomList<T>.ElementFrequency> list) Parameters Type Name Description IList < RandomList.ElementFrequency <>> list List of elements to copy over into this list. RandomList(IList<RandomList<T>.ElementFrequency>, IEqualityComparer<T>) Copies the elements of a list into a new RandomList<T> . Declaration public RandomList(IList<RandomList<T>.ElementFrequency> list, IEqualityComparer<T> comparer) Parameters Type Name Description IList < RandomList.ElementFrequency <>> list List of elements to copy over into this list. IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. RandomList(Int32) Creates an empty list, starting with the defined capacity. Declaration public RandomList(int initialCapacity) Parameters Type Name Description Int32 initialCapacity Initial size of this list RandomList(Int32, IEqualityComparer<T>) Creates an empty list, starting with the defined capacity and utilizing a comparer to detect overlap when running Add(T, Int32) and Remove(T, Int32) . Declaration public RandomList(int initialCapacity, IEqualityComparer<T> comparer) Parameters Type Name Description Int32 initialCapacity Initial size of this list IEqualityComparer <T> comparer The comparer used to detect if an element already exists in this list. Properties Capacity Capacity of this list. This value automatically increases as more elements are added to this list. Declaration public int Capacity { get; } Property Value Type Description Int32 Comparer Comparer used to check whether the list already contains an item or not. Declaration public IEqualityComparer<T> Comparer { get; } Property Value Type Description IEqualityComparer <T> Count Number of unique elements in this list. Disregards the Frequency value. Declaration public int Count { get; } Property Value Type Description Int32 CurrentElement Grabs the currently focused element in the list. Declaration public T CurrentElement { get; } Property Value Type Description T Remarks This method shuffles ShuffledIndexes if OmiyaGames.RandomList`1.index is outside of the list's range. See Also NextRandomElement ElementToIndexMap Dictionary mapping an element to the index in OmiyaGames.RandomList`1.elementsList . Declaration protected Dictionary<T, int> ElementToIndexMap { get; } Property Value Type Description Dictionary <T, Int32 > IsReadOnly Always returns false. Declaration public bool IsReadOnly { get; } Property Value Type Description Boolean false NextRandomElement Grabs the next random element from the list. Declaration public T NextRandomElement { get; } Property Value Type Description T See Also CurrentElement ShuffledIndexes Contains a list of whole numbers corresponding to an index in OmiyaGames.RandomList`1.elementsList , shuffled. Note that the Frequency will affect the number of times an index appears in this list. Declaration protected List<int> ShuffledIndexes { get; } Property Value Type Description List < Int32 > Methods Add(T) Declaration public void Add(T item) Parameters Type Name Description T item Add(T, Int32) Declaration public virtual void Add(T item, int numberOfItemsToAdd) Parameters Type Name Description T item Int32 numberOfItemsToAdd Clear() Empties the list Declaration public void Clear() Contains(T) Checks if an item is in the list. Declaration public bool Contains(T item) Parameters Type Name Description T item The item to test. Returns Type Description Boolean True if item is in the list. CopyTo(T[], Int32) Declaration public void CopyTo(T[] array, int arrayIndex) Parameters Type Name Description T[] array Int32 arrayIndex CopyTo(RandomList<T>.ElementFrequency[], Int32) Declaration public void CopyTo(RandomList<T>.ElementFrequency[] array, int arrayIndex) Parameters Type Name Description RandomList.ElementFrequency <>[] array Int32 arrayIndex GetFrequency(T) Gets the number of instances an item appears in this list. Declaration public int GetFrequency(T item) Parameters Type Name Description T item Returns Type Description Int32 Number of instances an item appears in this list. IncrementFrequency(Int32, Int32) Increments the frequency in an element in OmiyaGames.RandomList`1.elementsList . Accepts negative frequency values (which, of course, causes the method to decrement the item's frequency). Declaration protected int IncrementFrequency(int itemIndex, int frequency) Parameters Type Name Description Int32 itemIndex Index of the element to increment frequency of. Int32 frequency The change in frequency. Returns Type Description Int32 The sum of the old and new frequency values. IndexOf(T) Gets index of the first instance of item from OmiyaGames.RandomList`1.elementsList . Declaration protected int IndexOf(T item) Parameters Type Name Description T item Element in OmiyaGames.RandomList`1.elementsList to search for. Returns Type Description Int32 Index of item in OmiyaGames.RandomList`1.elementsList , or -1 if not found. Remove(T) Declaration public bool Remove(T item) Parameters Type Name Description T item Returns Type Description Boolean Remove(T, Int32) Declaration public virtual int Remove(T item, int numberOfItemsToRemove) Parameters Type Name Description T item Int32 numberOfItemsToRemove Returns Type Description Int32 RemoveAllOf(T) Removes all instances of an item from the list. Declaration public int RemoveAllOf(T item) Parameters Type Name Description T item The item to remove from the list. Returns Type Description Int32 Number of instanes of item removed. RemoveFromIndexList(Int32, Int32) Removes all instances of a value from ShuffledIndexes , and decrements any other value greater than removeIndex. Declaration protected virtual void RemoveFromIndexList(int removeIndex, int numberOfItemsToRemove) Parameters Type Name Description Int32 removeIndex The value to remove from ShuffledIndexes . Int32 numberOfItemsToRemove Reshuffle() Flags the list to reshuffle next time when CurrentElement or NextRandomElement gets called. Declaration public void Reshuffle() SyncAllMapsAndLists() Syncs the information in OmiyaGames.RandomList`1.elementsList to ElementToIndexMap and ShuffledIndexes . As the name of the method implies, this is potentially a costly operation; use it sparringly! Declaration protected virtual void SyncAllMapsAndLists()"
  },
  "api/OmiyaGames.ReadOnlyAttribute.html": {
    "href": "api/OmiyaGames.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Common documentation",
    "keywords": "Class ReadOnlyAttribute Makes a field read-only in the Unity editor with [ReadOnly] . Inheritance Object ReadOnlyAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ReadOnlyAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 10/1/2014It3rationInitial version 3/25/2020Taro OmiyaConverted the class to a package"
  },
  "api/OmiyaGames.ScenePathAttribute.html": {
    "href": "api/OmiyaGames.ScenePathAttribute.html",
    "title": "Class ScenePathAttribute | Common documentation",
    "keywords": "Class ScenePathAttribute Makes a string field accept scene assets only. Inheritance Object ScenePathAttribute Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ScenePathAttribute : PropertyAttribute Remarks Revision History: DateNameDescription 12/28/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors ScenePathAttribute() Adds a browse button to a string field. Declaration public ScenePathAttribute()"
  },
  "api/OmiyaGames.SupportedPlatforms.html": {
    "href": "api/OmiyaGames.SupportedPlatforms.html",
    "title": "Enum SupportedPlatforms | Common documentation",
    "keywords": "Enum SupportedPlatforms An enum indicating supported platforms. Can be multi-selected in the Unity Editor. Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax [Flags] public enum SupportedPlatforms Remarks Revision History: DateNameDescription 6/12/2018TaroInitial version 3/25/2020TaroConverted the class to a package Fields Name Description AllPlatforms Android iOS Linux MacOS None Web Windows See Also SupportedPlatformsUtility"
  },
  "api/OmiyaGames.SupportedPlatformsUtility.html": {
    "href": "api/OmiyaGames.SupportedPlatformsUtility.html",
    "title": "Class SupportedPlatformsUtility | Common documentation",
    "keywords": "Class SupportedPlatformsUtility A class full of helper and extended methods for SupportPlatforms . Inheritance Object SupportedPlatformsUtility Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public static class SupportedPlatformsUtility Properties AllPlatformNames Gets a list of all the platform names. It is highly recommended to cache this value. Declaration public static string[] AllPlatformNames { get; } Property Value Type Description String [] NumberOfPlatforms Gets the number of flags in SupportPlatforms . It is highly recommended to cache this value. Declaration public static int NumberOfPlatforms { get; } Property Value Type Description Int32 Methods IsSupported(SupportedPlatforms) Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms) Parameters Type Name Description SupportedPlatforms currentPlatforms Returns Type Description Boolean IsSupported(SupportedPlatforms, SupportedPlatforms) Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms, SupportedPlatforms singlePlatform) Parameters Type Name Description SupportedPlatforms currentPlatforms SupportedPlatforms singlePlatform Returns Type Description Boolean IsSupported(SupportedPlatforms, RuntimePlatform) Declaration public static bool IsSupported(this SupportedPlatforms currentPlatforms, RuntimePlatform platform) Parameters Type Name Description SupportedPlatforms currentPlatforms RuntimePlatform platform Returns Type Description Boolean"
  },
  "api/OmiyaGames.ThreadSafe-1.html": {
    "href": "api/OmiyaGames.ThreadSafe-1.html",
    "title": "Class ThreadSafe<T> | Common documentation",
    "keywords": "Class ThreadSafe<T> Creates a thread-safe variable. Only works on primitives. Note: if a thread-safe integer is in plans, use ThreadSafeInt instead. Inheritance Object ThreadSafe<T> ThreadSafeInt ThreadSafeLong ThreadSafeStringBuilder Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafe<T> Type Parameters Name Description T Remarks Revision History: DateNameDescription 10/2/2018TaroInitial version 3/25/2020TaroConverted the class to a package Constructors ThreadSafe() Declaration public ThreadSafe() ThreadSafe(T) Declaration public ThreadSafe(T value) Parameters Type Name Description T value Fields value Declaration protected T value Field Value Type Description T Properties ThreadLock The lock Declaration protected object ThreadLock { get; } Property Value Type Description Object Value Thread-safe access to value. Declaration public T Value { get; set; } Property Value Type Description T Methods Equals(Object) Checks the type of argument. If it's another ThreadSafe<T> , compares the two Value . If it's T , compares it with Value in a thread-safe manner. Declaration public override bool Equals(object obj) Parameters Type Name Description Object obj The object to compare to. Returns Type Description Boolean If it's another ThreadSafe<T> , returns true if two wrapper's Value matches. If it's T , returns true if matches with the argument. Otherwise, false. Overrides Object.Equals(Object) GetHashCode() Declaration public override int GetHashCode() Returns Type Description Int32 Overrides Object.GetHashCode() ToString() Declaration public override string ToString() Returns Type Description String Overrides Object.ToString() See Also ThreadSafeInt"
  },
  "api/OmiyaGames.ThreadSafeInt.html": {
    "href": "api/OmiyaGames.ThreadSafeInt.html",
    "title": "Class ThreadSafeInt | Common documentation",
    "keywords": "Class ThreadSafeInt Inheritance Object ThreadSafe < Int32 > ThreadSafeInt Inherited Members ThreadSafe<Int32>.value ThreadSafe<Int32>.ThreadLock ThreadSafe<Int32>.Value ThreadSafe<Int32>.ToString() ThreadSafe<Int32>.GetHashCode() ThreadSafe<Int32>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeInt : ThreadSafe<int> Constructors ThreadSafeInt() Declaration public ThreadSafeInt() ThreadSafeInt(Int32) Declaration public ThreadSafeInt(int value) Parameters Type Name Description Int32 value Methods Add(Int32) A more performant version of Value += addBy . Declaration public void Add(int addBy) Parameters Type Name Description Int32 addBy Decrement() A more performant version of Value-- . Declaration public void Decrement() Increment() A more performant version of Value++ . Declaration public void Increment() Subtract(Int32) A more performant version of Value -= subtractBy . Declaration public void Subtract(int subtractBy) Parameters Type Name Description Int32 subtractBy"
  },
  "api/OmiyaGames.ThreadSafeLong.html": {
    "href": "api/OmiyaGames.ThreadSafeLong.html",
    "title": "Class ThreadSafeLong | Common documentation",
    "keywords": "Class ThreadSafeLong Inheritance Object ThreadSafe < Int64 > ThreadSafeLong Inherited Members ThreadSafe<Int64>.value ThreadSafe<Int64>.ThreadLock ThreadSafe<Int64>.Value ThreadSafe<Int64>.ToString() ThreadSafe<Int64>.GetHashCode() ThreadSafe<Int64>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeLong : ThreadSafe<long> Constructors ThreadSafeLong() Declaration public ThreadSafeLong() ThreadSafeLong(Int64) Declaration public ThreadSafeLong(long value) Parameters Type Name Description Int64 value Methods Add(Int32) A more performant version of Value += addBy . Declaration public void Add(int addBy) Parameters Type Name Description Int32 addBy Decrement() A more performant version of Value-- . Declaration public void Decrement() Increment() A more performant version of Value++ . Declaration public void Increment() Subtract(Int32) A more performant version of Value -= subtractBy . Declaration public void Subtract(int subtractBy) Parameters Type Name Description Int32 subtractBy"
  },
  "api/OmiyaGames.ThreadSafeStringBuilder.html": {
    "href": "api/OmiyaGames.ThreadSafeStringBuilder.html",
    "title": "Class ThreadSafeStringBuilder | Common documentation",
    "keywords": "Class ThreadSafeStringBuilder Inheritance Object ThreadSafe < StringBuilder > ThreadSafeStringBuilder Inherited Members ThreadSafe<StringBuilder>.value ThreadSafe<StringBuilder>.ThreadLock ThreadSafe<StringBuilder>.Value ThreadSafe<StringBuilder>.ToString() ThreadSafe<StringBuilder>.GetHashCode() ThreadSafe<StringBuilder>.Equals(Object) Namespace : OmiyaGames Assembly : cs.temp.dll.dll Syntax public class ThreadSafeStringBuilder : ThreadSafe<StringBuilder> Constructors ThreadSafeStringBuilder() Declaration public ThreadSafeStringBuilder() Properties Length Declaration public int Length { get; } Property Value Type Description Int32 Methods Append(String) Declaration public void Append(string append) Parameters Type Name Description String append AppendLine() Declaration public void AppendLine() Clear() Declaration public void Clear() Insert(Int32, String) Declaration public void Insert(int index, string insert) Parameters Type Name Description Int32 index String insert"
  },
  "index.html": {
    "href": "index.html",
    "title": "Omiya Games - Common | Common documentation",
    "keywords": "Omiya Games - Common Common scripts used within Omiya Games ' many tools and libraries. Install There are two common methods for installing this package. Through Unity Package Manager Unity's own Package Manager supports importing packages through a URL to a Git repo : First, on this repository page, click the \"Clone or download\" button, and copy over this repository's HTTPS URL. Then click on the + button on the upper-left-hand corner of the Package Manager, select \"Add package from git URL...\" on the context menu, then paste this repo's URL! While easy and straightforward, this method has a few major downside: it does not support dependency resolution and package upgrading when a new version is released. To add support for that, the following method is recommended: Through OpenUPM Installing via OpenUPM's command line tool is recommended because it supports dependency resolution, upgrading, and downgrading this package. If you haven't already installed OpenUPM , you can do so through Node.js's npm (obviously have Node.js installed in your system first): npm install -g openupm-cli Then, to install this package, just run the following command at the root of your Unity project: openupm add com.omiyagames.common Resources Documentation Change Log LICENSE Overall package is licensed under MIT , unless otherwise noted in the 3rd party licenses file and/or source code. Copyright (c) 2014-2020 Omiya Games"
  },
  "manual/changelog.html": {
    "href": "manual/changelog.html",
    "title": "Change Log | Common documentation",
    "keywords": "Change Log 0.1.3-preview.1 New Feature #6: added unit tests for BidirectionalDictionary.cs , TestBidirectionalDictionary.cs New Enhancement: Integrated DocFX auto-generated documentation, in favor of Doxygen. New Enhancement: Integrated Github Action for mirroring. 0.1.2-preview.1 New Feature #5: added unit tests for RandomList.cs , TestRandomList.cs New Enhancement #2: for performance, RandomList.cs now stores a list of element-frequency pairs, rather than only the element themselves. Each element has to be unique; the paired frequency indicates how many times that element will appear in one cycle of iteration. 0.1.1-preview.1 Typo Fix: fixing typo, \"verison\" to \"version,\" on all source code documentation. Documentation: changed the format of the Doxygen-generated HTML file to have a sidebar. 0.1.0-preview.2 Documentation: added author information to package.json . Documentation: added supported Unity release in package.json . 0.1.0-preview.1 Initial commit, split off from the Template Unity Project ."
  },
  "manual/README.html": {
    "href": "manual/README.html",
    "title": "| Common documentation",
    "keywords": "This folder contains markdown files listed under \"Manual\" section in the documentation. When adding or removing any files in this folder, don't forget to update toc.yml accordingly!"
  }
}